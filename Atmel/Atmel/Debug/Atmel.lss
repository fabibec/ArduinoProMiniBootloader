
Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000104  00800100  00000dce  00000e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  00800204  00800204  00000f66  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f66  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1c  00000000  00000000  00001062  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000311  00000000  00000000  00001a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042b  00000000  00000000  00001d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000254  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fe  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f0  00000000  00000000  0000270e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00002efe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3b       	cpi	r26, 0xB4	; 180
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
  9e:	0c 94 e5 06 	jmp	0xdca	; 0xdca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_send>:
}

void uart_send(uint8_t data) {
	
	// If send register empty and no XOFF
	while(!(UCSR0A & (1<<UDRE0)) && !sendBlock) {
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 fd       	sbrc	r25, 5
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <uart_send+0x12>
  b0:	90 91 0a 02 	lds	r25, 0x020A
  b4:	99 23       	and	r25, r25
  b6:	c9 f3       	breq	.-14     	; 0xaa <uart_send+0x4>
		;
	}
	UDR0 = data;
  b8:	80 93 c6 00 	sts	0x00C6, r24
  bc:	08 95       	ret

000000be <clearScreen>:
	
}

void clearScreen(){
	// Clear terminal
	uart_send(27); // ESC
  be:	8b e1       	ldi	r24, 0x1B	; 27
  c0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	uart_send('[');
  c4:	8b e5       	ldi	r24, 0x5B	; 91
  c6:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	uart_send('2');
  ca:	82 e3       	ldi	r24, 0x32	; 50
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	uart_send('J');
  d0:	8a e4       	ldi	r24, 0x4A	; 74
  d2:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>

	// Move cursor to start
	uart_send(27);
  d6:	8b e1       	ldi	r24, 0x1B	; 27
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	uart_send('[');
  dc:	8b e5       	ldi	r24, 0x5B	; 91
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	uart_send('H');
  e2:	88 e4       	ldi	r24, 0x48	; 72
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
  e8:	08 95       	ret

000000ea <uart_init>:
}

void uart_init() {
	// Configure baud rate
	UBRR0H = (BAUD_CONST >> 8);
  ea:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_CONST;
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable uart send and receive and uart receive complete interrupt
	UCSR0B |= ((1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0));
  f4:	e1 ec       	ldi	r30, 0xC1	; 193
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 69       	ori	r24, 0x98	; 152
  fc:	80 83       	st	Z, r24

    clearScreen();
  fe:	0e 94 5f 00 	call	0xbe	; 0xbe <clearScreen>
 102:	08 95       	ret

00000104 <send_xoff>:
	}

	return returnVal;
}

void send_xoff(){
 104:	cf 93       	push	r28
	uint8_t sreg = SREG;
 106:	cf b7       	in	r28, 0x3f	; 63
	cli();
 108:	f8 94       	cli
	x_status = XOFF;
 10a:	83 e1       	ldi	r24, 0x13	; 19
 10c:	80 93 01 01 	sts	0x0101, r24
	uart_send(XOFF);
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	SREG = sreg;
 114:	cf bf       	out	0x3f, r28	; 63
	
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <__vector_18>:
volatile uint8_t lastRead = 0;
volatile uint8_t counter = 0;
volatile uint8_t sendBlock = 0;
volatile uint8_t x_status = XON; 

ISR(USART_RX_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	uint8_t tmp = UDR0;
 13c:	80 91 c6 00 	lds	r24, 0x00C6
	
	// If XOFF is received block sending
	if (tmp == XOFF) {
 140:	83 31       	cpi	r24, 0x13	; 19
 142:	21 f4       	brne	.+8      	; 0x14c <__vector_18+0x32>
		sendBlock = 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 0a 02 	sts	0x020A, r24
 14a:	22 c0       	rjmp	.+68     	; 0x190 <__vector_18+0x76>
	} 
	// if XON is received allow sending
	else if(tmp == XON) {
 14c:	81 31       	cpi	r24, 0x11	; 17
 14e:	19 f4       	brne	.+6      	; 0x156 <__vector_18+0x3c>
		sendBlock = 0;
 150:	10 92 0a 02 	sts	0x020A, r1
 154:	1d c0       	rjmp	.+58     	; 0x190 <__vector_18+0x76>
	}
	else {
		receiveBuffer[lastReceived] = tmp;
 156:	e0 91 0d 02 	lds	r30, 0x020D
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e2 5f       	subi	r30, 0xF2	; 242
 15e:	fd 4f       	sbci	r31, 0xFD	; 253
 160:	80 83       	st	Z, r24
		lastReceived = ((lastReceived + 1) % 32);
 162:	80 91 0d 02 	lds	r24, 0x020D
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	8f 71       	andi	r24, 0x1F	; 31
 16c:	90 78       	andi	r25, 0x80	; 128
 16e:	80 93 0d 02 	sts	0x020D, r24
		counter++;
 172:	80 91 0b 02 	lds	r24, 0x020B
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	80 93 0b 02 	sts	0x020B, r24
		// If ring buffer has 26 elements stop receiving
		if(counter >= 22 && x_status==XON) {
 17c:	80 91 0b 02 	lds	r24, 0x020B
 180:	86 31       	cpi	r24, 0x16	; 22
 182:	30 f0       	brcs	.+12     	; 0x190 <__vector_18+0x76>
 184:	80 91 01 01 	lds	r24, 0x0101
 188:	81 31       	cpi	r24, 0x11	; 17
 18a:	11 f4       	brne	.+4      	; 0x190 <__vector_18+0x76>
			send_xoff();
 18c:	0e 94 82 00 	call	0x104	; 0x104 <send_xoff>
		}
	}
	 
	
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <send_xon>:
	x_status = XOFF;
	uart_send(XOFF);
	SREG = sreg;
	
}
void send_xon(){
 1b2:	cf 93       	push	r28
	uint8_t sreg = SREG;
 1b4:	cf b7       	in	r28, 0x3f	; 63
	cli();
 1b6:	f8 94       	cli
	x_status = XON;
 1b8:	81 e1       	ldi	r24, 0x11	; 17
 1ba:	80 93 01 01 	sts	0x0101, r24
	uart_send(XON);
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	SREG = sreg;
 1c2:	cf bf       	out	0x3f, r28	; 63
}
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <uart_receive>:
		;
	}
	UDR0 = data;
}

uint8_t uart_receive(){
 1c8:	cf 93       	push	r28
	UBRR0L = 0x0;
	UCSR0B = 0x0;
}

uint8_t bufferEmpty() {
	return (!counter);
 1ca:	80 91 0b 02 	lds	r24, 0x020B
	}
	UDR0 = data;
}

uint8_t uart_receive(){
	if(bufferEmpty()) {
 1ce:	88 23       	and	r24, r24
 1d0:	01 f1       	breq	.+64     	; 0x212 <uart_receive+0x4a>
		return '\0';
	}
	
	uint8_t returnVal = receiveBuffer[lastRead];	
 1d2:	e0 91 0c 02 	lds	r30, 0x020C
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	e2 5f       	subi	r30, 0xF2	; 242
 1da:	fd 4f       	sbci	r31, 0xFD	; 253
 1dc:	c0 81       	ld	r28, Z
	counter--;
 1de:	90 91 0b 02 	lds	r25, 0x020B
 1e2:	91 50       	subi	r25, 0x01	; 1
 1e4:	90 93 0b 02 	sts	0x020B, r25
	lastRead = (lastRead + 1) % 32;
 1e8:	20 91 0c 02 	lds	r18, 0x020C
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	2f 71       	andi	r18, 0x1F	; 31
 1f4:	30 78       	andi	r19, 0x80	; 128
 1f6:	20 93 0c 02 	sts	0x020C, r18
	
	// If ring buffer elements are less than or equal to 10 allow sending
	if (counter <= 10 && x_status == XOFF) {
 1fa:	90 91 0b 02 	lds	r25, 0x020B
 1fe:	9b 30       	cpi	r25, 0x0B	; 11
 200:	50 f4       	brcc	.+20     	; 0x216 <uart_receive+0x4e>
 202:	80 91 01 01 	lds	r24, 0x0101
 206:	83 31       	cpi	r24, 0x13	; 19
 208:	41 f4       	brne	.+16     	; 0x21a <uart_receive+0x52>
		send_xon();
 20a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <send_xon>
	}

	return returnVal;
 20e:	8c 2f       	mov	r24, r28
 210:	05 c0       	rjmp	.+10     	; 0x21c <uart_receive+0x54>
	UDR0 = data;
}

uint8_t uart_receive(){
	if(bufferEmpty()) {
		return '\0';
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	03 c0       	rjmp	.+6      	; 0x21c <uart_receive+0x54>
	// If ring buffer elements are less than or equal to 10 allow sending
	if (counter <= 10 && x_status == XOFF) {
		send_xon();
	}

	return returnVal;
 216:	8c 2f       	mov	r24, r28
 218:	01 c0       	rjmp	.+2      	; 0x21c <uart_receive+0x54>
 21a:	8c 2f       	mov	r24, r28
}
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <sendCRLF>:
	uart_send(XON);
	SREG = sreg;
}

void sendCRLF(){
    uart_send(0x0D);
 220:	8d e0       	ldi	r24, 0x0D	; 13
 222:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
    uart_send(0x0A);
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
 22c:	08 95       	ret

0000022e <sendString>:
}

void sendString(char * string){
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
    uint8_t index = 0;

    while(string[index] != 0){
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	51 f0       	breq	.+20     	; 0x250 <sendString+0x22>
    uart_send(0x0D);
    uart_send(0x0A);
}

void sendString(char * string){
    uint8_t index = 0;
 23c:	10 e0       	ldi	r17, 0x00	; 0

    while(string[index] != 0){
        uart_send(string[index]);
 23e:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
        index++;
 242:	1f 5f       	subi	r17, 0xFF	; 255
}

void sendString(char * string){
    uint8_t index = 0;

    while(string[index] != 0){
 244:	fe 01       	movw	r30, r28
 246:	e1 0f       	add	r30, r17
 248:	f1 1d       	adc	r31, r1
 24a:	80 81       	ld	r24, Z
 24c:	81 11       	cpse	r24, r1
 24e:	f7 cf       	rjmp	.-18     	; 0x23e <sendString+0x10>
        uart_send(string[index]);
        index++;
    }   
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	08 95       	ret

00000258 <runProgram>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	81 ee       	ldi	r24, 0xE1	; 225
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <runProgram+0x6>
 266:	00 c0       	rjmp	.+0      	; 0x268 <runProgram+0x10>
 268:	00 00       	nop
    //endString("Starting program...");
    
    _delay_ms(100);

    // Reset Timer
    TCCR1B = 0x0;
 26a:	10 92 81 00 	sts	0x0081, r1
    TCNT1 = 0x0;
 26e:	10 92 85 00 	sts	0x0085, r1
 272:	10 92 84 00 	sts	0x0084, r1
    TIMSK1 = 0x0;
 276:	10 92 6f 00 	sts	0x006F, r1
 27a:	08 95       	ret

0000027c <__vector_13>:
void boot_program_page(uint16_t page, uint8_t *buf);



/* This Timer runs 4sec in order to signal a the timeout*/
ISR(TIMER1_OVF_vect){
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
    runProgram();
 29e:	0e 94 2c 01 	call	0x258	; 0x258 <runProgram>
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <programFlash>:
    // Jump into the program
    goto *(0x0);
    */
}

void programFlash(){
 2c4:	6f 92       	push	r6
 2c6:	7f 92       	push	r7
 2c8:	8f 92       	push	r8
 2ca:	9f 92       	push	r9
 2cc:	af 92       	push	r10
 2ce:	bf 92       	push	r11
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	c8 5c       	subi	r28, 0xC8	; 200
 2e6:	d1 09       	sbc	r29, r1
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
	char msg[200];
	
	// Fill the buffer with padding if EOF received
	if(recordType == EOF_RECORD){
 2f2:	80 91 2e 02 	lds	r24, 0x022E
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	09 f0       	breq	.+2      	; 0x2fc <programFlash+0x38>
 2fa:	69 c0       	rjmp	.+210    	; 0x3ce <programFlash+0x10a>
		snprintf(msg, 200, "DataIndex %u ", dataIndex);
 2fc:	80 91 09 02 	lds	r24, 0x0209
 300:	1f 92       	push	r1
 302:	8f 93       	push	r24
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	9f 93       	push	r25
 30a:	8f 93       	push	r24
 30c:	1f 92       	push	r1
 30e:	88 ec       	ldi	r24, 0xC8	; 200
 310:	8f 93       	push	r24
 312:	8e 01       	movw	r16, r28
 314:	0f 5f       	subi	r16, 0xFF	; 255
 316:	1f 4f       	sbci	r17, 0xFF	; 255
 318:	1f 93       	push	r17
 31a:	0f 93       	push	r16
 31c:	0e 94 06 04 	call	0x80c	; 0x80c <snprintf>
		sendString(msg);
 320:	c8 01       	movw	r24, r16
 322:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
		for(uint8_t i = dataIndex; i < SPM_PAGESIZE; i++){
 326:	d0 90 09 02 	lds	r13, 0x0209
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	dd 20       	and	r13, r13
 336:	0c f4       	brge	.+2      	; 0x33a <programFlash+0x76>
 338:	4a c0       	rjmp	.+148    	; 0x3ce <programFlash+0x10a>
			data[i] = 0xFF;
 33a:	bb 24       	eor	r11, r11
 33c:	ba 94       	dec	r11
			snprintf(msg, 200, "Setting %u ", i);
 33e:	0f 2e       	mov	r0, r31
 340:	f0 e1       	ldi	r31, 0x10	; 16
 342:	ef 2e       	mov	r14, r31
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	ff 2e       	mov	r15, r31
 348:	f0 2d       	mov	r31, r0
 34a:	0f 2e       	mov	r0, r31
 34c:	f8 ec       	ldi	r31, 0xC8	; 200
 34e:	cf 2e       	mov	r12, r31
 350:	f0 2d       	mov	r31, r0
	// Fill the buffer with padding if EOF received
	if(recordType == EOF_RECORD){
		snprintf(msg, 200, "DataIndex %u ", dataIndex);
		sendString(msg);
		for(uint8_t i = dataIndex; i < SPM_PAGESIZE; i++){
			data[i] = 0xFF;
 352:	ed 2d       	mov	r30, r13
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	e1 5d       	subi	r30, 0xD1	; 209
 358:	fd 4f       	sbci	r31, 0xFD	; 253
 35a:	b0 82       	st	Z, r11
			snprintf(msg, 200, "Setting %u ", i);
 35c:	1f 92       	push	r1
 35e:	df 92       	push	r13
 360:	ff 92       	push	r15
 362:	ef 92       	push	r14
 364:	1f 92       	push	r1
 366:	cf 92       	push	r12
 368:	1f 93       	push	r17
 36a:	0f 93       	push	r16
 36c:	0e 94 06 04 	call	0x80c	; 0x80c <snprintf>
			sendString(msg);
 370:	c8 01       	movw	r24, r16
 372:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
			sendCRLF();
 376:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
	
	// Fill the buffer with padding if EOF received
	if(recordType == EOF_RECORD){
		snprintf(msg, 200, "DataIndex %u ", dataIndex);
		sendString(msg);
		for(uint8_t i = dataIndex; i < SPM_PAGESIZE; i++){
 37a:	d3 94       	inc	r13
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
 386:	2c f7       	brge	.-54     	; 0x352 <programFlash+0x8e>
 388:	22 c0       	rjmp	.+68     	; 0x3ce <programFlash+0x10a>
 38a:	70 2e       	mov	r7, r16
 38c:	78 18       	sub	r7, r8
	sendCRLF();
	snprintf(msg, 200, "Printing page %d", pageAddress);
	sendString(msg);
	sendCRLF();
	for(uint8_t i = 0; i < SPM_PAGESIZE; i++){
		snprintf(msg, 200, "%x ", data[i]);
 38e:	f8 01       	movw	r30, r16
 390:	81 91       	ld	r24, Z+
 392:	8f 01       	movw	r16, r30
 394:	1f 92       	push	r1
 396:	8f 93       	push	r24
 398:	df 92       	push	r13
 39a:	cf 92       	push	r12
 39c:	1f 92       	push	r1
 39e:	6f 92       	push	r6
 3a0:	ff 92       	push	r15
 3a2:	ef 92       	push	r14
 3a4:	0e 94 06 04 	call	0x80c	; 0x80c <snprintf>
		sendString(msg);
 3a8:	c7 01       	movw	r24, r14
 3aa:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
		if(i % 16 == 0) {sendCRLF();}
 3ae:	87 2d       	mov	r24, r7
 3b0:	8f 70       	andi	r24, 0x0F	; 15
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	11 f4       	brne	.+4      	; 0x3c2 <programFlash+0xfe>
 3be:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
	
	sendCRLF();
	snprintf(msg, 200, "Printing page %d", pageAddress);
	sendString(msg);
	sendCRLF();
	for(uint8_t i = 0; i < SPM_PAGESIZE; i++){
 3c2:	0a 15       	cp	r16, r10
 3c4:	1b 05       	cpc	r17, r11
 3c6:	09 f7       	brne	.-62     	; 0x38a <programFlash+0xc6>
		snprintf(msg, 200, "%x ", data[i]);
		sendString(msg);
		if(i % 16 == 0) {sendCRLF();}
	}
	dataIndex = 0;
 3c8:	10 92 09 02 	sts	0x0209, r1
 3cc:	3b c0       	rjmp	.+118    	; 0x444 <programFlash+0x180>
			sendCRLF();
		}
	}
	// Print
	
	sendCRLF();
 3ce:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
	snprintf(msg, 200, "Printing page %d", pageAddress);
 3d2:	80 91 b0 02 	lds	r24, 0x02B0
 3d6:	8f 93       	push	r24
 3d8:	80 91 af 02 	lds	r24, 0x02AF
 3dc:	8f 93       	push	r24
 3de:	80 e2       	ldi	r24, 0x20	; 32
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	9f 93       	push	r25
 3e4:	8f 93       	push	r24
 3e6:	1f 92       	push	r1
 3e8:	88 ec       	ldi	r24, 0xC8	; 200
 3ea:	8f 93       	push	r24
 3ec:	8e 01       	movw	r16, r28
 3ee:	0f 5f       	subi	r16, 0xFF	; 255
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
 3f2:	1f 93       	push	r17
 3f4:	0f 93       	push	r16
 3f6:	0e 94 06 04 	call	0x80c	; 0x80c <snprintf>
	sendString(msg);
 3fa:	c8 01       	movw	r24, r16
 3fc:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
	sendCRLF();
 400:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
 404:	0f 2e       	mov	r0, r31
 406:	ff e2       	ldi	r31, 0x2F	; 47
 408:	8f 2e       	mov	r8, r31
 40a:	f2 e0       	ldi	r31, 0x02	; 2
 40c:	9f 2e       	mov	r9, r31
 40e:	f0 2d       	mov	r31, r0
 410:	0f 2e       	mov	r0, r31
 412:	ff ea       	ldi	r31, 0xAF	; 175
 414:	af 2e       	mov	r10, r31
 416:	f2 e0       	ldi	r31, 0x02	; 2
 418:	bf 2e       	mov	r11, r31
 41a:	f0 2d       	mov	r31, r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
 426:	84 01       	movw	r16, r8
	for(uint8_t i = 0; i < SPM_PAGESIZE; i++){
		snprintf(msg, 200, "%x ", data[i]);
 428:	0f 2e       	mov	r0, r31
 42a:	fc e1       	ldi	r31, 0x1C	; 28
 42c:	cf 2e       	mov	r12, r31
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	df 2e       	mov	r13, r31
 432:	f0 2d       	mov	r31, r0
 434:	0f 2e       	mov	r0, r31
 436:	f8 ec       	ldi	r31, 0xC8	; 200
 438:	6f 2e       	mov	r6, r31
 43a:	f0 2d       	mov	r31, r0
 43c:	fe 01       	movw	r30, r28
 43e:	31 96       	adiw	r30, 0x01	; 1
 440:	7f 01       	movw	r14, r30
 442:	a3 cf       	rjmp	.-186    	; 0x38a <programFlash+0xc6>
		sendString(msg);
		if(i % 16 == 0) {sendCRLF();}
	}
	dataIndex = 0;
}
 444:	c8 53       	subi	r28, 0x38	; 56
 446:	df 4f       	sbci	r29, 0xFF	; 255
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	ff 90       	pop	r15
 45c:	ef 90       	pop	r14
 45e:	df 90       	pop	r13
 460:	cf 90       	pop	r12
 462:	bf 90       	pop	r11
 464:	af 90       	pop	r10
 466:	9f 90       	pop	r9
 468:	8f 90       	pop	r8
 46a:	7f 90       	pop	r7
 46c:	6f 90       	pop	r6
 46e:	08 95       	ret

00000470 <hexDec>:

/* Converts 4-Byte Hex String into uint16_t and 2-Byte Hex String into uint8_t */
uint16_t hexDec(uint8_t *bytes, uint8_t num){
    uint16_t ret = 0;
    uint8_t c;
    for(uint8_t i = 0; i < num; i++){
 470:	66 23       	and	r22, r22
 472:	29 f1       	breq	.+74     	; 0x4be <hexDec+0x4e>
 474:	48 2f       	mov	r20, r24
 476:	e8 2f       	mov	r30, r24
 478:	f9 2f       	mov	r31, r25
    SREG = sreg;
}

/* Converts 4-Byte Hex String into uint16_t and 2-Byte Hex String into uint8_t */
uint16_t hexDec(uint8_t *bytes, uint8_t num){
    uint16_t ret = 0;
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t c;
    for(uint8_t i = 0; i < num; i++){
        c = bytes[i];
 47e:	31 91       	ld	r19, Z+
        if(c >= '0' && c <= '9'){
 480:	20 ed       	ldi	r18, 0xD0	; 208
 482:	23 0f       	add	r18, r19
 484:	2a 30       	cpi	r18, 0x0A	; 10
 486:	78 f0       	brcs	.+30     	; 0x4a6 <hexDec+0x36>
            c -= '0';
        } else if (c >= 'A' && c <= 'F'){
 488:	2f eb       	ldi	r18, 0xBF	; 191
 48a:	23 0f       	add	r18, r19
 48c:	26 30       	cpi	r18, 0x06	; 6
 48e:	18 f4       	brcc	.+6      	; 0x496 <hexDec+0x26>
            c -= ('A' - 10);
 490:	29 ec       	ldi	r18, 0xC9	; 201
 492:	23 0f       	add	r18, r19
 494:	08 c0       	rjmp	.+16     	; 0x4a6 <hexDec+0x36>
        } else if (c >= 'a' && c <= 'f'){
 496:	2f e9       	ldi	r18, 0x9F	; 159
 498:	23 0f       	add	r18, r19
 49a:	26 30       	cpi	r18, 0x06	; 6
 49c:	18 f4       	brcc	.+6      	; 0x4a4 <hexDec+0x34>
            c -= ('a' - 10);
 49e:	29 ea       	ldi	r18, 0xA9	; 169
 4a0:	23 0f       	add	r18, r19
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <hexDec+0x36>
/* Converts 4-Byte Hex String into uint16_t and 2-Byte Hex String into uint8_t */
uint16_t hexDec(uint8_t *bytes, uint8_t num){
    uint16_t ret = 0;
    uint8_t c;
    for(uint8_t i = 0; i < num; i++){
        c = bytes[i];
 4a4:	23 2f       	mov	r18, r19
        } else if (c >= 'A' && c <= 'F'){
            c -= ('A' - 10);
        } else if (c >= 'a' && c <= 'f'){
            c -= ('a' - 10);
        }
        ret = (ret << 4) | c;
 4a6:	82 95       	swap	r24
 4a8:	92 95       	swap	r25
 4aa:	90 7f       	andi	r25, 0xF0	; 240
 4ac:	98 27       	eor	r25, r24
 4ae:	80 7f       	andi	r24, 0xF0	; 240
 4b0:	98 27       	eor	r25, r24
 4b2:	82 2b       	or	r24, r18
 4b4:	2e 2f       	mov	r18, r30
 4b6:	24 1b       	sub	r18, r20

/* Converts 4-Byte Hex String into uint16_t and 2-Byte Hex String into uint8_t */
uint16_t hexDec(uint8_t *bytes, uint8_t num){
    uint16_t ret = 0;
    uint8_t c;
    for(uint8_t i = 0; i < num; i++){
 4b8:	26 17       	cp	r18, r22
 4ba:	08 f3       	brcs	.-62     	; 0x47e <hexDec+0xe>
 4bc:	08 95       	ret
    SREG = sreg;
}

/* Converts 4-Byte Hex String into uint16_t and 2-Byte Hex String into uint8_t */
uint16_t hexDec(uint8_t *bytes, uint8_t num){
    uint16_t ret = 0;
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
            c -= ('a' - 10);
        }
        ret = (ret << 4) | c;
    } 
    return ret;
 4c2:	08 95       	ret

000004c4 <main>:
uint8_t bytesReceived = 0;
uint8_t hexBuffer[4] = {0};
uint8_t byteSum;
uint8_t state = WAIT_FOR_START;

int main(){
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	c8 5c       	subi	r28, 0xC8	; 200
 4ce:	d1 09       	sbc	r29, r1
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
    //uint8_t temp = MCUCR;
    //MCUCR = temp | (1 << IVCE);
    //MCUCR = temp | (1 << IVSEL);

    // Setup UART
    uart_init();
 4da:	0e 94 75 00 	call	0xea	; 0xea <uart_init>
    sendString("<p> -> flashing mode | <any other key> -> continue to the application");
 4de:	81 e3       	ldi	r24, 0x31	; 49
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
    sendCRLF();
 4e6:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>

    // Setup Timer1 to run (4 secs.) -> prescaler 1024
    TCCR1B |= ((1 << CS12) | (1 << CS10));
 4ea:	e1 e8       	ldi	r30, 0x81	; 129
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	85 60       	ori	r24, 0x05	; 5
 4f2:	80 83       	st	Z, r24
    // 65536 - 62500
    TCNT1 = 3036;
 4f4:	8c ed       	ldi	r24, 0xDC	; 220
 4f6:	9b e0       	ldi	r25, 0x0B	; 11
 4f8:	90 93 85 00 	sts	0x0085, r25
 4fc:	80 93 84 00 	sts	0x0084, r24
    TIMSK1 = (1 << TOIE1);
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 6f 00 	sts	0x006F, r24

    sei();
 506:	78 94       	sei

    // Mode selection 
    uint8_t c;
    while((c = uart_receive()) == '\0') ;
 508:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_receive>
 50c:	88 23       	and	r24, r24
 50e:	e1 f3       	breq	.-8      	; 0x508 <main+0x44>
	
    if(c != 'p'){
 510:	80 37       	cpi	r24, 0x70	; 112
 512:	41 f0       	breq	.+16     	; 0x524 <main+0x60>
        runProgram();
 514:	0e 94 2c 01 	call	0x258	; 0x258 <runProgram>
		sendString("I was in runProgramm!");
 518:	87 e7       	ldi	r24, 0x77	; 119
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
		sendCRLF();
 520:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
    }

    // Disable Timer
    TIMSK1 = 0x0;
 524:	10 92 6f 00 	sts	0x006F, r1

    // Receive program data from serial
    sendString("Please enter .hex code");
 528:	8d e8       	ldi	r24, 0x8D	; 141
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
    sendCRLF();
 530:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
                                data[dataIndex++] = 0xFF;
                            }
							*/

                            // Go to the next state
                            state = GET_CHECKSUM;
 534:	0f 2e       	mov	r0, r31
 536:	f6 e0       	ldi	r31, 0x06	; 6
 538:	6f 2e       	mov	r6, r31
 53a:	f0 2d       	mov	r31, r0
                    // Reset for next state
                    byteSum += recordType;
                    bytesReceived = 0;

                    // Skip GET_DATA state for EOF Records (Type 01)
                    state = (recordType == 1) ? GET_CHECKSUM : GET_DATA;               
 53c:	0f 2e       	mov	r0, r31
 53e:	f5 e0       	ldi	r31, 0x05	; 5
 540:	8f 2e       	mov	r8, r31
 542:	f0 2d       	mov	r31, r0
                    */

                    /* Debug printf */
                    char msg[200];
					sendCRLF();
                    snprintf(msg, 200, "Len: %u, Adr: %u, RecType: %u, DataIndex: %u", dataLength, pageAddress, recordType, dataIndex);
 544:	0f 2e       	mov	r0, r31
 546:	f7 ed       	ldi	r31, 0xD7	; 215
 548:	ef 2e       	mov	r14, r31
 54a:	f1 e0       	ldi	r31, 0x01	; 1
 54c:	ff 2e       	mov	r15, r31
 54e:	f0 2d       	mov	r31, r0
 550:	0f 2e       	mov	r0, r31
 552:	f8 ec       	ldi	r31, 0xC8	; 200
 554:	9f 2e       	mov	r9, r31
 556:	f0 2d       	mov	r31, r0
 558:	8e 01       	movw	r16, r28
 55a:	0f 5f       	subi	r16, 0xFF	; 255
 55c:	1f 4f       	sbci	r17, 0xFF	; 255
                    sendString(msg);
                    sendCRLF();
                    
                    bytesReceived = 0;
                    state = WAIT_FOR_START;
 55e:	aa 24       	eor	r10, r10
 560:	a3 94       	inc	r10
                    // Calculate checksum -> build 2th's complement and check for equality
                    byteSum = ~byteSum + 1;
					
					if(byteSum != checksum){
						char msg[75];
						snprintf(msg, 75, "calc: %u, act: %u", byteSum, checksum);
 562:	0f 2e       	mov	r0, r31
 564:	f4 ea       	ldi	r31, 0xA4	; 164
 566:	cf 2e       	mov	r12, r31
 568:	f1 e0       	ldi	r31, 0x01	; 1
 56a:	df 2e       	mov	r13, r31
 56c:	f0 2d       	mov	r31, r0
 56e:	0f 2e       	mov	r0, r31
 570:	fb e4       	ldi	r31, 0x4B	; 75
 572:	7f 2e       	mov	r7, r31
 574:	f0 2d       	mov	r31, r0
                    // Add up Bytes for checksum
                    byteSum += dataLength;

                    // Reset for next state
                    bytesReceived = 0;
                    state = GET_ADDRESS;
 576:	0f 2e       	mov	r0, r31
 578:	f3 e0       	ldi	r31, 0x03	; 3
 57a:	bf 2e       	mov	r11, r31
 57c:	f0 2d       	mov	r31, r0
    sendString("Please enter .hex code");
    sendCRLF();
    
    // Wait for starting character
    while(1){
        while(!(c = uart_receive())) ;
 57e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_receive>
 582:	88 23       	and	r24, r24
 584:	e1 f3       	breq	.-8      	; 0x57e <main+0xba>

        switch(state){
 586:	90 91 00 01 	lds	r25, 0x0100
 58a:	93 30       	cpi	r25, 0x03	; 3
 58c:	e1 f1       	breq	.+120    	; 0x606 <main+0x142>
 58e:	28 f4       	brcc	.+10     	; 0x59a <main+0xd6>
 590:	91 30       	cpi	r25, 0x01	; 1
 592:	61 f0       	breq	.+24     	; 0x5ac <main+0xe8>
 594:	92 30       	cpi	r25, 0x02	; 2
 596:	b1 f0       	breq	.+44     	; 0x5c4 <main+0x100>
 598:	f2 cf       	rjmp	.-28     	; 0x57e <main+0xba>
 59a:	95 30       	cpi	r25, 0x05	; 5
 59c:	09 f4       	brne	.+2      	; 0x5a0 <main+0xdc>
 59e:	85 c0       	rjmp	.+266    	; 0x6aa <main+0x1e6>
 5a0:	08 f4       	brcc	.+2      	; 0x5a4 <main+0xe0>
 5a2:	5c c0       	rjmp	.+184    	; 0x65c <main+0x198>
 5a4:	96 30       	cpi	r25, 0x06	; 6
 5a6:	09 f4       	brne	.+2      	; 0x5aa <main+0xe6>
 5a8:	b8 c0       	rjmp	.+368    	; 0x71a <main+0x256>
 5aa:	e9 cf       	rjmp	.-46     	; 0x57e <main+0xba>
            case WAIT_FOR_START:
                if(c == ':'){
 5ac:	8a 33       	cpi	r24, 0x3A	; 58
 5ae:	39 f7       	brne	.-50     	; 0x57e <main+0xba>
                    uart_send(':');
 5b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                    // Reset for next state
                    bytesReceived = 0;
 5b4:	10 92 08 02 	sts	0x0208, r1
                    byteSum = 0;
 5b8:	10 92 b1 02 	sts	0x02B1, r1
                    state = GET_DATA_LENGTH;
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	80 93 00 01 	sts	0x0100, r24
 5c2:	dd cf       	rjmp	.-70     	; 0x57e <main+0xba>
                }    
            break;
            case GET_DATA_LENGTH:
                hexBuffer[bytesReceived++] = c;
 5c4:	e0 91 08 02 	lds	r30, 0x0208
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	9e 0f       	add	r25, r30
 5cc:	90 93 08 02 	sts	0x0208, r25
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	ec 5f       	subi	r30, 0xFC	; 252
 5d4:	fd 4f       	sbci	r31, 0xFD	; 253
 5d6:	80 83       	st	Z, r24
                uart_send(c);
 5d8:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                if(bytesReceived == 2){
 5dc:	80 91 08 02 	lds	r24, 0x0208
 5e0:	82 30       	cpi	r24, 0x02	; 2
 5e2:	69 f6       	brne	.-102    	; 0x57e <main+0xba>
                    // Decode data length
                    dataLength = (uint8_t) hexDec(hexBuffer, 2); 
 5e4:	62 e0       	ldi	r22, 0x02	; 2
 5e6:	84 e0       	ldi	r24, 0x04	; 4
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	0e 94 38 02 	call	0x470	; 0x470 <hexDec>
 5ee:	80 93 b3 02 	sts	0x02B3, r24

                    // Add up Bytes for checksum
                    byteSum += dataLength;
 5f2:	90 91 b1 02 	lds	r25, 0x02B1
 5f6:	89 0f       	add	r24, r25
 5f8:	80 93 b1 02 	sts	0x02B1, r24

                    // Reset for next state
                    bytesReceived = 0;
 5fc:	10 92 08 02 	sts	0x0208, r1
                    state = GET_ADDRESS;
 600:	b0 92 00 01 	sts	0x0100, r11
 604:	bc cf       	rjmp	.-136    	; 0x57e <main+0xba>
                }
            break;
            case GET_ADDRESS:
                hexBuffer[bytesReceived++] = c;
 606:	e0 91 08 02 	lds	r30, 0x0208
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	9e 0f       	add	r25, r30
 60e:	90 93 08 02 	sts	0x0208, r25
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	ec 5f       	subi	r30, 0xFC	; 252
 616:	fd 4f       	sbci	r31, 0xFD	; 253
 618:	80 83       	st	Z, r24
                uart_send(c);
 61a:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                if(bytesReceived == 4){
 61e:	80 91 08 02 	lds	r24, 0x0208
 622:	84 30       	cpi	r24, 0x04	; 4
 624:	09 f0       	breq	.+2      	; 0x628 <main+0x164>
 626:	ab cf       	rjmp	.-170    	; 0x57e <main+0xba>
                    // Decode absolute page address
                    pageAddress = hexDec(hexBuffer, 4);
 628:	64 e0       	ldi	r22, 0x04	; 4
 62a:	84 e0       	ldi	r24, 0x04	; 4
 62c:	92 e0       	ldi	r25, 0x02	; 2
 62e:	0e 94 38 02 	call	0x470	; 0x470 <hexDec>
                    
                    // Update Checksum
                    byteSum += (uint8_t) pageAddress;
 632:	20 91 b1 02 	lds	r18, 0x02B1
 636:	28 0f       	add	r18, r24
                    byteSum += (uint8_t) (pageAddress >> 8);
 638:	29 0f       	add	r18, r25
 63a:	20 93 b1 02 	sts	0x02B1, r18
                    
                    // Calculate relative page address
                    pageAddress = pageAddress / SPM_PAGESIZE;
 63e:	88 0f       	add	r24, r24
 640:	89 2f       	mov	r24, r25
 642:	88 1f       	adc	r24, r24
 644:	99 0b       	sbc	r25, r25
 646:	91 95       	neg	r25
 648:	90 93 b0 02 	sts	0x02B0, r25
 64c:	80 93 af 02 	sts	0x02AF, r24

                    // Reset for next state
                    bytesReceived = 0;
 650:	10 92 08 02 	sts	0x0208, r1
                    state = GET_RECORD_TYPE;
 654:	84 e0       	ldi	r24, 0x04	; 4
 656:	80 93 00 01 	sts	0x0100, r24
 65a:	91 cf       	rjmp	.-222    	; 0x57e <main+0xba>
                }
            break;
            case GET_RECORD_TYPE:
                hexBuffer[bytesReceived++] = c;
 65c:	e0 91 08 02 	lds	r30, 0x0208
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	9e 0f       	add	r25, r30
 664:	90 93 08 02 	sts	0x0208, r25
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	ec 5f       	subi	r30, 0xFC	; 252
 66c:	fd 4f       	sbci	r31, 0xFD	; 253
 66e:	80 83       	st	Z, r24
                uart_send(c);
 670:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                if(bytesReceived == 2){
 674:	80 91 08 02 	lds	r24, 0x0208
 678:	82 30       	cpi	r24, 0x02	; 2
 67a:	09 f0       	breq	.+2      	; 0x67e <main+0x1ba>
 67c:	80 cf       	rjmp	.-256    	; 0x57e <main+0xba>
                    // Decode record type
                    recordType = (uint8_t) hexDec(hexBuffer, 2);
 67e:	62 e0       	ldi	r22, 0x02	; 2
 680:	84 e0       	ldi	r24, 0x04	; 4
 682:	92 e0       	ldi	r25, 0x02	; 2
 684:	0e 94 38 02 	call	0x470	; 0x470 <hexDec>
 688:	80 93 2e 02 	sts	0x022E, r24

                    // Reset for next state
                    byteSum += recordType;
 68c:	90 91 b1 02 	lds	r25, 0x02B1
 690:	98 0f       	add	r25, r24
 692:	90 93 b1 02 	sts	0x02B1, r25
                    bytesReceived = 0;
 696:	10 92 08 02 	sts	0x0208, r1

                    // Skip GET_DATA state for EOF Records (Type 01)
                    state = (recordType == 1) ? GET_CHECKSUM : GET_DATA;               
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	11 f4       	brne	.+4      	; 0x6a2 <main+0x1de>
 69e:	86 2d       	mov	r24, r6
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <main+0x1e0>
 6a2:	88 2d       	mov	r24, r8
 6a4:	80 93 00 01 	sts	0x0100, r24
 6a8:	6a cf       	rjmp	.-300    	; 0x57e <main+0xba>
                }
            break;
            case GET_DATA:
                switch (recordType){
 6aa:	90 91 2e 02 	lds	r25, 0x022E
 6ae:	91 11       	cpse	r25, r1
 6b0:	66 cf       	rjmp	.-308    	; 0x57e <main+0xba>
                case DATA_RECORD:
                    hexBuffer[bytesReceived++] = c;
 6b2:	e0 91 08 02 	lds	r30, 0x0208
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	9e 0f       	add	r25, r30
 6ba:	90 93 08 02 	sts	0x0208, r25
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	ec 5f       	subi	r30, 0xFC	; 252
 6c2:	fd 4f       	sbci	r31, 0xFD	; 253
 6c4:	80 83       	st	Z, r24
                    uart_send(c);
 6c6:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                    if(bytesReceived == 2){
 6ca:	80 91 08 02 	lds	r24, 0x0208
 6ce:	82 30       	cpi	r24, 0x02	; 2
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <main+0x210>
 6d2:	55 cf       	rjmp	.-342    	; 0x57e <main+0xba>
                        // Collect data and add up checksum
                        data[dataIndex] = (uint8_t) hexDec(hexBuffer, 2);
 6d4:	50 90 09 02 	lds	r5, 0x0209
 6d8:	62 e0       	ldi	r22, 0x02	; 2
 6da:	84 e0       	ldi	r24, 0x04	; 4
 6dc:	92 e0       	ldi	r25, 0x02	; 2
 6de:	0e 94 38 02 	call	0x470	; 0x470 <hexDec>
 6e2:	e5 2d       	mov	r30, r5
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	e1 5d       	subi	r30, 0xD1	; 209
 6e8:	fd 4f       	sbci	r31, 0xFD	; 253
 6ea:	80 83       	st	Z, r24
                        byteSum += data[dataIndex];
 6ec:	90 91 b1 02 	lds	r25, 0x02B1
 6f0:	89 0f       	add	r24, r25
 6f2:	80 93 b1 02 	sts	0x02B1, r24
                        
                        // calculate bound
						uint8_t localBound = (dataIndex % 16) + 1;		
						
						dataIndex++;
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	85 0d       	add	r24, r5
 6fa:	80 93 09 02 	sts	0x0209, r24
						bytesReceived = 0;
 6fe:	10 92 08 02 	sts	0x0208, r1
                        // Collect data and add up checksum
                        data[dataIndex] = (uint8_t) hexDec(hexBuffer, 2);
                        byteSum += data[dataIndex];
                        
                        // calculate bound
						uint8_t localBound = (dataIndex % 16) + 1;		
 702:	85 2d       	mov	r24, r5
 704:	8f 70       	andi	r24, 0x0F	; 15
 706:	55 24       	eor	r5, r5
 708:	53 94       	inc	r5
 70a:	58 0e       	add	r5, r24
						
						dataIndex++;
						bytesReceived = 0;
						
                        if(localBound == dataLength){
 70c:	80 91 b3 02 	lds	r24, 0x02B3
 710:	58 12       	cpse	r5, r24
 712:	35 cf       	rjmp	.-406    	; 0x57e <main+0xba>
                                data[dataIndex++] = 0xFF;
                            }
							*/

                            // Go to the next state
                            state = GET_CHECKSUM;
 714:	60 92 00 01 	sts	0x0100, r6
 718:	32 cf       	rjmp	.-412    	; 0x57e <main+0xba>
                default:
                    break;
                }
            break;
            case GET_CHECKSUM:
                hexBuffer[bytesReceived++] = c;
 71a:	e0 91 08 02 	lds	r30, 0x0208
 71e:	91 e0       	ldi	r25, 0x01	; 1
 720:	9e 0f       	add	r25, r30
 722:	90 93 08 02 	sts	0x0208, r25
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	ec 5f       	subi	r30, 0xFC	; 252
 72a:	fd 4f       	sbci	r31, 0xFD	; 253
 72c:	80 83       	st	Z, r24
                uart_send(c);
 72e:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                if(bytesReceived == 2){
 732:	80 91 08 02 	lds	r24, 0x0208
 736:	82 30       	cpi	r24, 0x02	; 2
 738:	09 f0       	breq	.+2      	; 0x73c <main+0x278>
 73a:	21 cf       	rjmp	.-446    	; 0x57e <main+0xba>
                    checksum = (uint8_t) hexDec(hexBuffer, 2);
 73c:	62 e0       	ldi	r22, 0x02	; 2
 73e:	84 e0       	ldi	r24, 0x04	; 4
 740:	92 e0       	ldi	r25, 0x02	; 2
 742:	0e 94 38 02 	call	0x470	; 0x470 <hexDec>
 746:	80 93 b2 02 	sts	0x02B2, r24
                    
                    // Calculate checksum -> build 2th's complement and check for equality
                    byteSum = ~byteSum + 1;
 74a:	20 91 b1 02 	lds	r18, 0x02B1
 74e:	21 95       	neg	r18
 750:	20 93 b1 02 	sts	0x02B1, r18
					
					if(byteSum != checksum){
 754:	28 17       	cp	r18, r24
 756:	19 f1       	breq	.+70     	; 0x79e <main+0x2da>
 758:	99 27       	eor	r25, r25
						char msg[75];
						snprintf(msg, 75, "calc: %u, act: %u", byteSum, checksum);
 75a:	9f 93       	push	r25
 75c:	8f 93       	push	r24
 75e:	1f 92       	push	r1
 760:	2f 93       	push	r18
 762:	df 92       	push	r13
 764:	cf 92       	push	r12
 766:	1f 92       	push	r1
 768:	7f 92       	push	r7
 76a:	1f 93       	push	r17
 76c:	0f 93       	push	r16
 76e:	0e 94 06 04 	call	0x80c	; 0x80c <snprintf>
						sendString(msg);
 772:	c8 01       	movw	r24, r16
 774:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
						sendString("Checksum mismatch. Please Reset!");
 778:	86 eb       	ldi	r24, 0xB6	; 182
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
 780:	2a ea       	ldi	r18, 0xAA	; 170
 782:	36 ee       	ldi	r19, 0xE6	; 230
 784:	86 e9       	ldi	r24, 0x96	; 150
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	21 50       	subi	r18, 0x01	; 1
 78a:	30 40       	sbci	r19, 0x00	; 0
 78c:	80 40       	sbci	r24, 0x00	; 0
 78e:	90 40       	sbci	r25, 0x00	; 0
 790:	d9 f7       	brne	.-10     	; 0x788 <main+0x2c4>
 792:	00 00       	nop
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	f8 94       	cli
 798:	de bf       	out	0x3e, r29	; 62
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	cd bf       	out	0x3d, r28	; 61
						_delay_ms(10000);
					}
					
					if(dataIndex == SPM_PAGESIZE || recordType == EOF_RECORD){
 79e:	80 91 09 02 	lds	r24, 0x0209
 7a2:	80 38       	cpi	r24, 0x80	; 128
 7a4:	21 f0       	breq	.+8      	; 0x7ae <main+0x2ea>
 7a6:	80 91 2e 02 	lds	r24, 0x022E
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	11 f4       	brne	.+4      	; 0x7b2 <main+0x2ee>
						programFlash();
 7ae:	0e 94 62 01 	call	0x2c4	; 0x2c4 <programFlash>
                        send_XON();
                    */

                    /* Debug printf */
                    char msg[200];
					sendCRLF();
 7b2:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
                    snprintf(msg, 200, "Len: %u, Adr: %u, RecType: %u, DataIndex: %u", dataLength, pageAddress, recordType, dataIndex);
 7b6:	80 91 09 02 	lds	r24, 0x0209
 7ba:	1f 92       	push	r1
 7bc:	8f 93       	push	r24
 7be:	80 91 2e 02 	lds	r24, 0x022E
 7c2:	1f 92       	push	r1
 7c4:	8f 93       	push	r24
 7c6:	80 91 b0 02 	lds	r24, 0x02B0
 7ca:	8f 93       	push	r24
 7cc:	80 91 af 02 	lds	r24, 0x02AF
 7d0:	8f 93       	push	r24
 7d2:	80 91 b3 02 	lds	r24, 0x02B3
 7d6:	1f 92       	push	r1
 7d8:	8f 93       	push	r24
 7da:	ff 92       	push	r15
 7dc:	ef 92       	push	r14
 7de:	1f 92       	push	r1
 7e0:	9f 92       	push	r9
 7e2:	1f 93       	push	r17
 7e4:	0f 93       	push	r16
 7e6:	0e 94 06 04 	call	0x80c	; 0x80c <snprintf>
                    sendString(msg);
 7ea:	c8 01       	movw	r24, r16
 7ec:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
                    sendCRLF();
 7f0:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
                    
                    bytesReceived = 0;
 7f4:	10 92 08 02 	sts	0x0208, r1
                    state = WAIT_FOR_START;
 7f8:	a0 92 00 01 	sts	0x0100, r10
                    sendCRLF();
 7fc:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	f8 94       	cli
 804:	de bf       	out	0x3e, r29	; 62
 806:	0f be       	out	0x3f, r0	; 63
 808:	cd bf       	out	0x3d, r28	; 61
 80a:	b9 ce       	rjmp	.-654    	; 0x57e <main+0xba>

0000080c <snprintf>:
 80c:	ae e0       	ldi	r26, 0x0E	; 14
 80e:	b0 e0       	ldi	r27, 0x00	; 0
 810:	ec e0       	ldi	r30, 0x0C	; 12
 812:	f4 e0       	ldi	r31, 0x04	; 4
 814:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__prologue_saves__+0x1c>
 818:	0d 89       	ldd	r16, Y+21	; 0x15
 81a:	1e 89       	ldd	r17, Y+22	; 0x16
 81c:	8f 89       	ldd	r24, Y+23	; 0x17
 81e:	98 8d       	ldd	r25, Y+24	; 0x18
 820:	26 e0       	ldi	r18, 0x06	; 6
 822:	2c 83       	std	Y+4, r18	; 0x04
 824:	1a 83       	std	Y+2, r17	; 0x02
 826:	09 83       	std	Y+1, r16	; 0x01
 828:	97 ff       	sbrs	r25, 7
 82a:	02 c0       	rjmp	.+4      	; 0x830 <snprintf+0x24>
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	90 e8       	ldi	r25, 0x80	; 128
 830:	01 97       	sbiw	r24, 0x01	; 1
 832:	9e 83       	std	Y+6, r25	; 0x06
 834:	8d 83       	std	Y+5, r24	; 0x05
 836:	ae 01       	movw	r20, r28
 838:	45 5e       	subi	r20, 0xE5	; 229
 83a:	5f 4f       	sbci	r21, 0xFF	; 255
 83c:	69 8d       	ldd	r22, Y+25	; 0x19
 83e:	7a 8d       	ldd	r23, Y+26	; 0x1a
 840:	ce 01       	movw	r24, r28
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	0e 94 36 04 	call	0x86c	; 0x86c <vfprintf>
 848:	4d 81       	ldd	r20, Y+5	; 0x05
 84a:	5e 81       	ldd	r21, Y+6	; 0x06
 84c:	57 fd       	sbrc	r21, 7
 84e:	0a c0       	rjmp	.+20     	; 0x864 <snprintf+0x58>
 850:	2f 81       	ldd	r18, Y+7	; 0x07
 852:	38 85       	ldd	r19, Y+8	; 0x08
 854:	42 17       	cp	r20, r18
 856:	53 07       	cpc	r21, r19
 858:	0c f4       	brge	.+2      	; 0x85c <snprintf+0x50>
 85a:	9a 01       	movw	r18, r20
 85c:	f8 01       	movw	r30, r16
 85e:	e2 0f       	add	r30, r18
 860:	f3 1f       	adc	r31, r19
 862:	10 82       	st	Z, r1
 864:	2e 96       	adiw	r28, 0x0e	; 14
 866:	e4 e0       	ldi	r30, 0x04	; 4
 868:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__epilogue_restores__+0x1c>

0000086c <vfprintf>:
 86c:	ac e0       	ldi	r26, 0x0C	; 12
 86e:	b0 e0       	ldi	r27, 0x00	; 0
 870:	ec e3       	ldi	r30, 0x3C	; 60
 872:	f4 e0       	ldi	r31, 0x04	; 4
 874:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__prologue_saves__>
 878:	7c 01       	movw	r14, r24
 87a:	6b 01       	movw	r12, r22
 87c:	8a 01       	movw	r16, r20
 87e:	fc 01       	movw	r30, r24
 880:	17 82       	std	Z+7, r1	; 0x07
 882:	16 82       	std	Z+6, r1	; 0x06
 884:	83 81       	ldd	r24, Z+3	; 0x03
 886:	81 ff       	sbrs	r24, 1
 888:	bd c1       	rjmp	.+890    	; 0xc04 <__stack+0x305>
 88a:	ce 01       	movw	r24, r28
 88c:	01 96       	adiw	r24, 0x01	; 1
 88e:	4c 01       	movw	r8, r24
 890:	f7 01       	movw	r30, r14
 892:	93 81       	ldd	r25, Z+3	; 0x03
 894:	f6 01       	movw	r30, r12
 896:	93 fd       	sbrc	r25, 3
 898:	85 91       	lpm	r24, Z+
 89a:	93 ff       	sbrs	r25, 3
 89c:	81 91       	ld	r24, Z+
 89e:	6f 01       	movw	r12, r30
 8a0:	88 23       	and	r24, r24
 8a2:	09 f4       	brne	.+2      	; 0x8a6 <vfprintf+0x3a>
 8a4:	ab c1       	rjmp	.+854    	; 0xbfc <__stack+0x2fd>
 8a6:	85 32       	cpi	r24, 0x25	; 37
 8a8:	39 f4       	brne	.+14     	; 0x8b8 <vfprintf+0x4c>
 8aa:	93 fd       	sbrc	r25, 3
 8ac:	85 91       	lpm	r24, Z+
 8ae:	93 ff       	sbrs	r25, 3
 8b0:	81 91       	ld	r24, Z+
 8b2:	6f 01       	movw	r12, r30
 8b4:	85 32       	cpi	r24, 0x25	; 37
 8b6:	29 f4       	brne	.+10     	; 0x8c2 <vfprintf+0x56>
 8b8:	b7 01       	movw	r22, r14
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 1e 06 	call	0xc3c	; 0xc3c <fputc>
 8c0:	e7 cf       	rjmp	.-50     	; 0x890 <vfprintf+0x24>
 8c2:	51 2c       	mov	r5, r1
 8c4:	31 2c       	mov	r3, r1
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	20 32       	cpi	r18, 0x20	; 32
 8ca:	a0 f4       	brcc	.+40     	; 0x8f4 <vfprintf+0x88>
 8cc:	8b 32       	cpi	r24, 0x2B	; 43
 8ce:	69 f0       	breq	.+26     	; 0x8ea <vfprintf+0x7e>
 8d0:	30 f4       	brcc	.+12     	; 0x8de <vfprintf+0x72>
 8d2:	80 32       	cpi	r24, 0x20	; 32
 8d4:	59 f0       	breq	.+22     	; 0x8ec <vfprintf+0x80>
 8d6:	83 32       	cpi	r24, 0x23	; 35
 8d8:	69 f4       	brne	.+26     	; 0x8f4 <vfprintf+0x88>
 8da:	20 61       	ori	r18, 0x10	; 16
 8dc:	2c c0       	rjmp	.+88     	; 0x936 <__stack+0x37>
 8de:	8d 32       	cpi	r24, 0x2D	; 45
 8e0:	39 f0       	breq	.+14     	; 0x8f0 <vfprintf+0x84>
 8e2:	80 33       	cpi	r24, 0x30	; 48
 8e4:	39 f4       	brne	.+14     	; 0x8f4 <vfprintf+0x88>
 8e6:	21 60       	ori	r18, 0x01	; 1
 8e8:	26 c0       	rjmp	.+76     	; 0x936 <__stack+0x37>
 8ea:	22 60       	ori	r18, 0x02	; 2
 8ec:	24 60       	ori	r18, 0x04	; 4
 8ee:	23 c0       	rjmp	.+70     	; 0x936 <__stack+0x37>
 8f0:	28 60       	ori	r18, 0x08	; 8
 8f2:	21 c0       	rjmp	.+66     	; 0x936 <__stack+0x37>
 8f4:	27 fd       	sbrc	r18, 7
 8f6:	27 c0       	rjmp	.+78     	; 0x946 <__stack+0x47>
 8f8:	30 ed       	ldi	r19, 0xD0	; 208
 8fa:	38 0f       	add	r19, r24
 8fc:	3a 30       	cpi	r19, 0x0A	; 10
 8fe:	78 f4       	brcc	.+30     	; 0x91e <__stack+0x1f>
 900:	26 ff       	sbrs	r18, 6
 902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0x11>
 904:	fa e0       	ldi	r31, 0x0A	; 10
 906:	5f 9e       	mul	r5, r31
 908:	30 0d       	add	r19, r0
 90a:	11 24       	eor	r1, r1
 90c:	53 2e       	mov	r5, r19
 90e:	13 c0       	rjmp	.+38     	; 0x936 <__stack+0x37>
 910:	8a e0       	ldi	r24, 0x0A	; 10
 912:	38 9e       	mul	r3, r24
 914:	30 0d       	add	r19, r0
 916:	11 24       	eor	r1, r1
 918:	33 2e       	mov	r3, r19
 91a:	20 62       	ori	r18, 0x20	; 32
 91c:	0c c0       	rjmp	.+24     	; 0x936 <__stack+0x37>
 91e:	8e 32       	cpi	r24, 0x2E	; 46
 920:	21 f4       	brne	.+8      	; 0x92a <__stack+0x2b>
 922:	26 fd       	sbrc	r18, 6
 924:	6b c1       	rjmp	.+726    	; 0xbfc <__stack+0x2fd>
 926:	20 64       	ori	r18, 0x40	; 64
 928:	06 c0       	rjmp	.+12     	; 0x936 <__stack+0x37>
 92a:	8c 36       	cpi	r24, 0x6C	; 108
 92c:	11 f4       	brne	.+4      	; 0x932 <__stack+0x33>
 92e:	20 68       	ori	r18, 0x80	; 128
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0x37>
 932:	88 36       	cpi	r24, 0x68	; 104
 934:	41 f4       	brne	.+16     	; 0x946 <__stack+0x47>
 936:	f6 01       	movw	r30, r12
 938:	93 fd       	sbrc	r25, 3
 93a:	85 91       	lpm	r24, Z+
 93c:	93 ff       	sbrs	r25, 3
 93e:	81 91       	ld	r24, Z+
 940:	6f 01       	movw	r12, r30
 942:	81 11       	cpse	r24, r1
 944:	c1 cf       	rjmp	.-126    	; 0x8c8 <vfprintf+0x5c>
 946:	98 2f       	mov	r25, r24
 948:	9f 7d       	andi	r25, 0xDF	; 223
 94a:	95 54       	subi	r25, 0x45	; 69
 94c:	93 30       	cpi	r25, 0x03	; 3
 94e:	28 f4       	brcc	.+10     	; 0x95a <__stack+0x5b>
 950:	0c 5f       	subi	r16, 0xFC	; 252
 952:	1f 4f       	sbci	r17, 0xFF	; 255
 954:	ff e3       	ldi	r31, 0x3F	; 63
 956:	f9 83       	std	Y+1, r31	; 0x01
 958:	0d c0       	rjmp	.+26     	; 0x974 <__stack+0x75>
 95a:	83 36       	cpi	r24, 0x63	; 99
 95c:	31 f0       	breq	.+12     	; 0x96a <__stack+0x6b>
 95e:	83 37       	cpi	r24, 0x73	; 115
 960:	71 f0       	breq	.+28     	; 0x97e <__stack+0x7f>
 962:	83 35       	cpi	r24, 0x53	; 83
 964:	09 f0       	breq	.+2      	; 0x968 <__stack+0x69>
 966:	5b c0       	rjmp	.+182    	; 0xa1e <__stack+0x11f>
 968:	22 c0       	rjmp	.+68     	; 0x9ae <__stack+0xaf>
 96a:	f8 01       	movw	r30, r16
 96c:	80 81       	ld	r24, Z
 96e:	89 83       	std	Y+1, r24	; 0x01
 970:	0e 5f       	subi	r16, 0xFE	; 254
 972:	1f 4f       	sbci	r17, 0xFF	; 255
 974:	44 24       	eor	r4, r4
 976:	43 94       	inc	r4
 978:	51 2c       	mov	r5, r1
 97a:	54 01       	movw	r10, r8
 97c:	15 c0       	rjmp	.+42     	; 0x9a8 <__stack+0xa9>
 97e:	38 01       	movw	r6, r16
 980:	f2 e0       	ldi	r31, 0x02	; 2
 982:	6f 0e       	add	r6, r31
 984:	71 1c       	adc	r7, r1
 986:	f8 01       	movw	r30, r16
 988:	a0 80       	ld	r10, Z
 98a:	b1 80       	ldd	r11, Z+1	; 0x01
 98c:	26 ff       	sbrs	r18, 6
 98e:	03 c0       	rjmp	.+6      	; 0x996 <__stack+0x97>
 990:	65 2d       	mov	r22, r5
 992:	70 e0       	ldi	r23, 0x00	; 0
 994:	02 c0       	rjmp	.+4      	; 0x99a <__stack+0x9b>
 996:	6f ef       	ldi	r22, 0xFF	; 255
 998:	7f ef       	ldi	r23, 0xFF	; 255
 99a:	c5 01       	movw	r24, r10
 99c:	2c 87       	std	Y+12, r18	; 0x0c
 99e:	0e 94 13 06 	call	0xc26	; 0xc26 <strnlen>
 9a2:	2c 01       	movw	r4, r24
 9a4:	83 01       	movw	r16, r6
 9a6:	2c 85       	ldd	r18, Y+12	; 0x0c
 9a8:	2f 77       	andi	r18, 0x7F	; 127
 9aa:	22 2e       	mov	r2, r18
 9ac:	17 c0       	rjmp	.+46     	; 0x9dc <__stack+0xdd>
 9ae:	38 01       	movw	r6, r16
 9b0:	f2 e0       	ldi	r31, 0x02	; 2
 9b2:	6f 0e       	add	r6, r31
 9b4:	71 1c       	adc	r7, r1
 9b6:	f8 01       	movw	r30, r16
 9b8:	a0 80       	ld	r10, Z
 9ba:	b1 80       	ldd	r11, Z+1	; 0x01
 9bc:	26 ff       	sbrs	r18, 6
 9be:	03 c0       	rjmp	.+6      	; 0x9c6 <__stack+0xc7>
 9c0:	65 2d       	mov	r22, r5
 9c2:	70 e0       	ldi	r23, 0x00	; 0
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0xcb>
 9c6:	6f ef       	ldi	r22, 0xFF	; 255
 9c8:	7f ef       	ldi	r23, 0xFF	; 255
 9ca:	c5 01       	movw	r24, r10
 9cc:	2c 87       	std	Y+12, r18	; 0x0c
 9ce:	0e 94 08 06 	call	0xc10	; 0xc10 <strnlen_P>
 9d2:	2c 01       	movw	r4, r24
 9d4:	2c 85       	ldd	r18, Y+12	; 0x0c
 9d6:	20 68       	ori	r18, 0x80	; 128
 9d8:	22 2e       	mov	r2, r18
 9da:	83 01       	movw	r16, r6
 9dc:	23 fc       	sbrc	r2, 3
 9de:	1b c0       	rjmp	.+54     	; 0xa16 <__stack+0x117>
 9e0:	83 2d       	mov	r24, r3
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	48 16       	cp	r4, r24
 9e6:	59 06       	cpc	r5, r25
 9e8:	b0 f4       	brcc	.+44     	; 0xa16 <__stack+0x117>
 9ea:	b7 01       	movw	r22, r14
 9ec:	80 e2       	ldi	r24, 0x20	; 32
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <fputc>
 9f4:	3a 94       	dec	r3
 9f6:	f4 cf       	rjmp	.-24     	; 0x9e0 <__stack+0xe1>
 9f8:	f5 01       	movw	r30, r10
 9fa:	27 fc       	sbrc	r2, 7
 9fc:	85 91       	lpm	r24, Z+
 9fe:	27 fe       	sbrs	r2, 7
 a00:	81 91       	ld	r24, Z+
 a02:	5f 01       	movw	r10, r30
 a04:	b7 01       	movw	r22, r14
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 1e 06 	call	0xc3c	; 0xc3c <fputc>
 a0c:	31 10       	cpse	r3, r1
 a0e:	3a 94       	dec	r3
 a10:	f1 e0       	ldi	r31, 0x01	; 1
 a12:	4f 1a       	sub	r4, r31
 a14:	51 08       	sbc	r5, r1
 a16:	41 14       	cp	r4, r1
 a18:	51 04       	cpc	r5, r1
 a1a:	71 f7       	brne	.-36     	; 0x9f8 <__stack+0xf9>
 a1c:	e5 c0       	rjmp	.+458    	; 0xbe8 <__stack+0x2e9>
 a1e:	84 36       	cpi	r24, 0x64	; 100
 a20:	11 f0       	breq	.+4      	; 0xa26 <__stack+0x127>
 a22:	89 36       	cpi	r24, 0x69	; 105
 a24:	39 f5       	brne	.+78     	; 0xa74 <__stack+0x175>
 a26:	f8 01       	movw	r30, r16
 a28:	27 ff       	sbrs	r18, 7
 a2a:	07 c0       	rjmp	.+14     	; 0xa3a <__stack+0x13b>
 a2c:	60 81       	ld	r22, Z
 a2e:	71 81       	ldd	r23, Z+1	; 0x01
 a30:	82 81       	ldd	r24, Z+2	; 0x02
 a32:	93 81       	ldd	r25, Z+3	; 0x03
 a34:	0c 5f       	subi	r16, 0xFC	; 252
 a36:	1f 4f       	sbci	r17, 0xFF	; 255
 a38:	08 c0       	rjmp	.+16     	; 0xa4a <__stack+0x14b>
 a3a:	60 81       	ld	r22, Z
 a3c:	71 81       	ldd	r23, Z+1	; 0x01
 a3e:	88 27       	eor	r24, r24
 a40:	77 fd       	sbrc	r23, 7
 a42:	80 95       	com	r24
 a44:	98 2f       	mov	r25, r24
 a46:	0e 5f       	subi	r16, 0xFE	; 254
 a48:	1f 4f       	sbci	r17, 0xFF	; 255
 a4a:	2f 76       	andi	r18, 0x6F	; 111
 a4c:	b2 2e       	mov	r11, r18
 a4e:	97 ff       	sbrs	r25, 7
 a50:	09 c0       	rjmp	.+18     	; 0xa64 <__stack+0x165>
 a52:	90 95       	com	r25
 a54:	80 95       	com	r24
 a56:	70 95       	com	r23
 a58:	61 95       	neg	r22
 a5a:	7f 4f       	sbci	r23, 0xFF	; 255
 a5c:	8f 4f       	sbci	r24, 0xFF	; 255
 a5e:	9f 4f       	sbci	r25, 0xFF	; 255
 a60:	20 68       	ori	r18, 0x80	; 128
 a62:	b2 2e       	mov	r11, r18
 a64:	2a e0       	ldi	r18, 0x0A	; 10
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	a4 01       	movw	r20, r8
 a6a:	0e 94 50 06 	call	0xca0	; 0xca0 <__ultoa_invert>
 a6e:	a8 2e       	mov	r10, r24
 a70:	a8 18       	sub	r10, r8
 a72:	44 c0       	rjmp	.+136    	; 0xafc <__stack+0x1fd>
 a74:	85 37       	cpi	r24, 0x75	; 117
 a76:	29 f4       	brne	.+10     	; 0xa82 <__stack+0x183>
 a78:	2f 7e       	andi	r18, 0xEF	; 239
 a7a:	b2 2e       	mov	r11, r18
 a7c:	2a e0       	ldi	r18, 0x0A	; 10
 a7e:	30 e0       	ldi	r19, 0x00	; 0
 a80:	25 c0       	rjmp	.+74     	; 0xacc <__stack+0x1cd>
 a82:	f2 2f       	mov	r31, r18
 a84:	f9 7f       	andi	r31, 0xF9	; 249
 a86:	bf 2e       	mov	r11, r31
 a88:	8f 36       	cpi	r24, 0x6F	; 111
 a8a:	c1 f0       	breq	.+48     	; 0xabc <__stack+0x1bd>
 a8c:	18 f4       	brcc	.+6      	; 0xa94 <__stack+0x195>
 a8e:	88 35       	cpi	r24, 0x58	; 88
 a90:	79 f0       	breq	.+30     	; 0xab0 <__stack+0x1b1>
 a92:	b4 c0       	rjmp	.+360    	; 0xbfc <__stack+0x2fd>
 a94:	80 37       	cpi	r24, 0x70	; 112
 a96:	19 f0       	breq	.+6      	; 0xa9e <__stack+0x19f>
 a98:	88 37       	cpi	r24, 0x78	; 120
 a9a:	21 f0       	breq	.+8      	; 0xaa4 <__stack+0x1a5>
 a9c:	af c0       	rjmp	.+350    	; 0xbfc <__stack+0x2fd>
 a9e:	2f 2f       	mov	r18, r31
 aa0:	20 61       	ori	r18, 0x10	; 16
 aa2:	b2 2e       	mov	r11, r18
 aa4:	b4 fe       	sbrs	r11, 4
 aa6:	0d c0       	rjmp	.+26     	; 0xac2 <__stack+0x1c3>
 aa8:	8b 2d       	mov	r24, r11
 aaa:	84 60       	ori	r24, 0x04	; 4
 aac:	b8 2e       	mov	r11, r24
 aae:	09 c0       	rjmp	.+18     	; 0xac2 <__stack+0x1c3>
 ab0:	24 ff       	sbrs	r18, 4
 ab2:	0a c0       	rjmp	.+20     	; 0xac8 <__stack+0x1c9>
 ab4:	9f 2f       	mov	r25, r31
 ab6:	96 60       	ori	r25, 0x06	; 6
 ab8:	b9 2e       	mov	r11, r25
 aba:	06 c0       	rjmp	.+12     	; 0xac8 <__stack+0x1c9>
 abc:	28 e0       	ldi	r18, 0x08	; 8
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	05 c0       	rjmp	.+10     	; 0xacc <__stack+0x1cd>
 ac2:	20 e1       	ldi	r18, 0x10	; 16
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <__stack+0x1cd>
 ac8:	20 e1       	ldi	r18, 0x10	; 16
 aca:	32 e0       	ldi	r19, 0x02	; 2
 acc:	f8 01       	movw	r30, r16
 ace:	b7 fe       	sbrs	r11, 7
 ad0:	07 c0       	rjmp	.+14     	; 0xae0 <__stack+0x1e1>
 ad2:	60 81       	ld	r22, Z
 ad4:	71 81       	ldd	r23, Z+1	; 0x01
 ad6:	82 81       	ldd	r24, Z+2	; 0x02
 ad8:	93 81       	ldd	r25, Z+3	; 0x03
 ada:	0c 5f       	subi	r16, 0xFC	; 252
 adc:	1f 4f       	sbci	r17, 0xFF	; 255
 ade:	06 c0       	rjmp	.+12     	; 0xaec <__stack+0x1ed>
 ae0:	60 81       	ld	r22, Z
 ae2:	71 81       	ldd	r23, Z+1	; 0x01
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 5f       	subi	r16, 0xFE	; 254
 aea:	1f 4f       	sbci	r17, 0xFF	; 255
 aec:	a4 01       	movw	r20, r8
 aee:	0e 94 50 06 	call	0xca0	; 0xca0 <__ultoa_invert>
 af2:	a8 2e       	mov	r10, r24
 af4:	a8 18       	sub	r10, r8
 af6:	fb 2d       	mov	r31, r11
 af8:	ff 77       	andi	r31, 0x7F	; 127
 afa:	bf 2e       	mov	r11, r31
 afc:	b6 fe       	sbrs	r11, 6
 afe:	0b c0       	rjmp	.+22     	; 0xb16 <__stack+0x217>
 b00:	2b 2d       	mov	r18, r11
 b02:	2e 7f       	andi	r18, 0xFE	; 254
 b04:	a5 14       	cp	r10, r5
 b06:	50 f4       	brcc	.+20     	; 0xb1c <__stack+0x21d>
 b08:	b4 fe       	sbrs	r11, 4
 b0a:	0a c0       	rjmp	.+20     	; 0xb20 <__stack+0x221>
 b0c:	b2 fc       	sbrc	r11, 2
 b0e:	08 c0       	rjmp	.+16     	; 0xb20 <__stack+0x221>
 b10:	2b 2d       	mov	r18, r11
 b12:	2e 7e       	andi	r18, 0xEE	; 238
 b14:	05 c0       	rjmp	.+10     	; 0xb20 <__stack+0x221>
 b16:	7a 2c       	mov	r7, r10
 b18:	2b 2d       	mov	r18, r11
 b1a:	03 c0       	rjmp	.+6      	; 0xb22 <__stack+0x223>
 b1c:	7a 2c       	mov	r7, r10
 b1e:	01 c0       	rjmp	.+2      	; 0xb22 <__stack+0x223>
 b20:	75 2c       	mov	r7, r5
 b22:	24 ff       	sbrs	r18, 4
 b24:	0d c0       	rjmp	.+26     	; 0xb40 <__stack+0x241>
 b26:	fe 01       	movw	r30, r28
 b28:	ea 0d       	add	r30, r10
 b2a:	f1 1d       	adc	r31, r1
 b2c:	80 81       	ld	r24, Z
 b2e:	80 33       	cpi	r24, 0x30	; 48
 b30:	11 f4       	brne	.+4      	; 0xb36 <__stack+0x237>
 b32:	29 7e       	andi	r18, 0xE9	; 233
 b34:	09 c0       	rjmp	.+18     	; 0xb48 <__stack+0x249>
 b36:	22 ff       	sbrs	r18, 2
 b38:	06 c0       	rjmp	.+12     	; 0xb46 <__stack+0x247>
 b3a:	73 94       	inc	r7
 b3c:	73 94       	inc	r7
 b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__stack+0x249>
 b40:	82 2f       	mov	r24, r18
 b42:	86 78       	andi	r24, 0x86	; 134
 b44:	09 f0       	breq	.+2      	; 0xb48 <__stack+0x249>
 b46:	73 94       	inc	r7
 b48:	23 fd       	sbrc	r18, 3
 b4a:	13 c0       	rjmp	.+38     	; 0xb72 <__stack+0x273>
 b4c:	20 ff       	sbrs	r18, 0
 b4e:	06 c0       	rjmp	.+12     	; 0xb5c <__stack+0x25d>
 b50:	5a 2c       	mov	r5, r10
 b52:	73 14       	cp	r7, r3
 b54:	18 f4       	brcc	.+6      	; 0xb5c <__stack+0x25d>
 b56:	53 0c       	add	r5, r3
 b58:	57 18       	sub	r5, r7
 b5a:	73 2c       	mov	r7, r3
 b5c:	73 14       	cp	r7, r3
 b5e:	68 f4       	brcc	.+26     	; 0xb7a <__stack+0x27b>
 b60:	b7 01       	movw	r22, r14
 b62:	80 e2       	ldi	r24, 0x20	; 32
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	2c 87       	std	Y+12, r18	; 0x0c
 b68:	0e 94 1e 06 	call	0xc3c	; 0xc3c <fputc>
 b6c:	73 94       	inc	r7
 b6e:	2c 85       	ldd	r18, Y+12	; 0x0c
 b70:	f5 cf       	rjmp	.-22     	; 0xb5c <__stack+0x25d>
 b72:	73 14       	cp	r7, r3
 b74:	10 f4       	brcc	.+4      	; 0xb7a <__stack+0x27b>
 b76:	37 18       	sub	r3, r7
 b78:	01 c0       	rjmp	.+2      	; 0xb7c <__stack+0x27d>
 b7a:	31 2c       	mov	r3, r1
 b7c:	24 ff       	sbrs	r18, 4
 b7e:	12 c0       	rjmp	.+36     	; 0xba4 <__stack+0x2a5>
 b80:	b7 01       	movw	r22, r14
 b82:	80 e3       	ldi	r24, 0x30	; 48
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	2c 87       	std	Y+12, r18	; 0x0c
 b88:	0e 94 1e 06 	call	0xc3c	; 0xc3c <fputc>
 b8c:	2c 85       	ldd	r18, Y+12	; 0x0c
 b8e:	22 ff       	sbrs	r18, 2
 b90:	17 c0       	rjmp	.+46     	; 0xbc0 <__stack+0x2c1>
 b92:	21 ff       	sbrs	r18, 1
 b94:	03 c0       	rjmp	.+6      	; 0xb9c <__stack+0x29d>
 b96:	88 e5       	ldi	r24, 0x58	; 88
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	02 c0       	rjmp	.+4      	; 0xba0 <__stack+0x2a1>
 b9c:	88 e7       	ldi	r24, 0x78	; 120
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	b7 01       	movw	r22, r14
 ba2:	0c c0       	rjmp	.+24     	; 0xbbc <__stack+0x2bd>
 ba4:	82 2f       	mov	r24, r18
 ba6:	86 78       	andi	r24, 0x86	; 134
 ba8:	59 f0       	breq	.+22     	; 0xbc0 <__stack+0x2c1>
 baa:	21 fd       	sbrc	r18, 1
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <__stack+0x2b3>
 bae:	80 e2       	ldi	r24, 0x20	; 32
 bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <__stack+0x2b5>
 bb2:	8b e2       	ldi	r24, 0x2B	; 43
 bb4:	27 fd       	sbrc	r18, 7
 bb6:	8d e2       	ldi	r24, 0x2D	; 45
 bb8:	b7 01       	movw	r22, r14
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	0e 94 1e 06 	call	0xc3c	; 0xc3c <fputc>
 bc0:	a5 14       	cp	r10, r5
 bc2:	38 f4       	brcc	.+14     	; 0xbd2 <__stack+0x2d3>
 bc4:	b7 01       	movw	r22, r14
 bc6:	80 e3       	ldi	r24, 0x30	; 48
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	0e 94 1e 06 	call	0xc3c	; 0xc3c <fputc>
 bce:	5a 94       	dec	r5
 bd0:	f7 cf       	rjmp	.-18     	; 0xbc0 <__stack+0x2c1>
 bd2:	aa 94       	dec	r10
 bd4:	f4 01       	movw	r30, r8
 bd6:	ea 0d       	add	r30, r10
 bd8:	f1 1d       	adc	r31, r1
 bda:	80 81       	ld	r24, Z
 bdc:	b7 01       	movw	r22, r14
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <fputc>
 be4:	a1 10       	cpse	r10, r1
 be6:	f5 cf       	rjmp	.-22     	; 0xbd2 <__stack+0x2d3>
 be8:	33 20       	and	r3, r3
 bea:	09 f4       	brne	.+2      	; 0xbee <__stack+0x2ef>
 bec:	51 ce       	rjmp	.-862    	; 0x890 <vfprintf+0x24>
 bee:	b7 01       	movw	r22, r14
 bf0:	80 e2       	ldi	r24, 0x20	; 32
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <fputc>
 bf8:	3a 94       	dec	r3
 bfa:	f6 cf       	rjmp	.-20     	; 0xbe8 <__stack+0x2e9>
 bfc:	f7 01       	movw	r30, r14
 bfe:	86 81       	ldd	r24, Z+6	; 0x06
 c00:	97 81       	ldd	r25, Z+7	; 0x07
 c02:	02 c0       	rjmp	.+4      	; 0xc08 <__stack+0x309>
 c04:	8f ef       	ldi	r24, 0xFF	; 255
 c06:	9f ef       	ldi	r25, 0xFF	; 255
 c08:	2c 96       	adiw	r28, 0x0c	; 12
 c0a:	e2 e1       	ldi	r30, 0x12	; 18
 c0c:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__epilogue_restores__>

00000c10 <strnlen_P>:
 c10:	fc 01       	movw	r30, r24
 c12:	05 90       	lpm	r0, Z+
 c14:	61 50       	subi	r22, 0x01	; 1
 c16:	70 40       	sbci	r23, 0x00	; 0
 c18:	01 10       	cpse	r0, r1
 c1a:	d8 f7       	brcc	.-10     	; 0xc12 <strnlen_P+0x2>
 c1c:	80 95       	com	r24
 c1e:	90 95       	com	r25
 c20:	8e 0f       	add	r24, r30
 c22:	9f 1f       	adc	r25, r31
 c24:	08 95       	ret

00000c26 <strnlen>:
 c26:	fc 01       	movw	r30, r24
 c28:	61 50       	subi	r22, 0x01	; 1
 c2a:	70 40       	sbci	r23, 0x00	; 0
 c2c:	01 90       	ld	r0, Z+
 c2e:	01 10       	cpse	r0, r1
 c30:	d8 f7       	brcc	.-10     	; 0xc28 <strnlen+0x2>
 c32:	80 95       	com	r24
 c34:	90 95       	com	r25
 c36:	8e 0f       	add	r24, r30
 c38:	9f 1f       	adc	r25, r31
 c3a:	08 95       	ret

00000c3c <fputc>:
 c3c:	0f 93       	push	r16
 c3e:	1f 93       	push	r17
 c40:	cf 93       	push	r28
 c42:	df 93       	push	r29
 c44:	18 2f       	mov	r17, r24
 c46:	09 2f       	mov	r16, r25
 c48:	eb 01       	movw	r28, r22
 c4a:	8b 81       	ldd	r24, Y+3	; 0x03
 c4c:	81 fd       	sbrc	r24, 1
 c4e:	03 c0       	rjmp	.+6      	; 0xc56 <fputc+0x1a>
 c50:	8f ef       	ldi	r24, 0xFF	; 255
 c52:	9f ef       	ldi	r25, 0xFF	; 255
 c54:	20 c0       	rjmp	.+64     	; 0xc96 <fputc+0x5a>
 c56:	82 ff       	sbrs	r24, 2
 c58:	10 c0       	rjmp	.+32     	; 0xc7a <fputc+0x3e>
 c5a:	4e 81       	ldd	r20, Y+6	; 0x06
 c5c:	5f 81       	ldd	r21, Y+7	; 0x07
 c5e:	2c 81       	ldd	r18, Y+4	; 0x04
 c60:	3d 81       	ldd	r19, Y+5	; 0x05
 c62:	42 17       	cp	r20, r18
 c64:	53 07       	cpc	r21, r19
 c66:	7c f4       	brge	.+30     	; 0xc86 <fputc+0x4a>
 c68:	e8 81       	ld	r30, Y
 c6a:	f9 81       	ldd	r31, Y+1	; 0x01
 c6c:	9f 01       	movw	r18, r30
 c6e:	2f 5f       	subi	r18, 0xFF	; 255
 c70:	3f 4f       	sbci	r19, 0xFF	; 255
 c72:	39 83       	std	Y+1, r19	; 0x01
 c74:	28 83       	st	Y, r18
 c76:	10 83       	st	Z, r17
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <fputc+0x4a>
 c7a:	e8 85       	ldd	r30, Y+8	; 0x08
 c7c:	f9 85       	ldd	r31, Y+9	; 0x09
 c7e:	81 2f       	mov	r24, r17
 c80:	09 95       	icall
 c82:	89 2b       	or	r24, r25
 c84:	29 f7       	brne	.-54     	; 0xc50 <fputc+0x14>
 c86:	2e 81       	ldd	r18, Y+6	; 0x06
 c88:	3f 81       	ldd	r19, Y+7	; 0x07
 c8a:	2f 5f       	subi	r18, 0xFF	; 255
 c8c:	3f 4f       	sbci	r19, 0xFF	; 255
 c8e:	3f 83       	std	Y+7, r19	; 0x07
 c90:	2e 83       	std	Y+6, r18	; 0x06
 c92:	81 2f       	mov	r24, r17
 c94:	90 2f       	mov	r25, r16
 c96:	df 91       	pop	r29
 c98:	cf 91       	pop	r28
 c9a:	1f 91       	pop	r17
 c9c:	0f 91       	pop	r16
 c9e:	08 95       	ret

00000ca0 <__ultoa_invert>:
 ca0:	fa 01       	movw	r30, r20
 ca2:	aa 27       	eor	r26, r26
 ca4:	28 30       	cpi	r18, 0x08	; 8
 ca6:	51 f1       	breq	.+84     	; 0xcfc <__ultoa_invert+0x5c>
 ca8:	20 31       	cpi	r18, 0x10	; 16
 caa:	81 f1       	breq	.+96     	; 0xd0c <__ultoa_invert+0x6c>
 cac:	e8 94       	clt
 cae:	6f 93       	push	r22
 cb0:	6e 7f       	andi	r22, 0xFE	; 254
 cb2:	6e 5f       	subi	r22, 0xFE	; 254
 cb4:	7f 4f       	sbci	r23, 0xFF	; 255
 cb6:	8f 4f       	sbci	r24, 0xFF	; 255
 cb8:	9f 4f       	sbci	r25, 0xFF	; 255
 cba:	af 4f       	sbci	r26, 0xFF	; 255
 cbc:	b1 e0       	ldi	r27, 0x01	; 1
 cbe:	3e d0       	rcall	.+124    	; 0xd3c <__ultoa_invert+0x9c>
 cc0:	b4 e0       	ldi	r27, 0x04	; 4
 cc2:	3c d0       	rcall	.+120    	; 0xd3c <__ultoa_invert+0x9c>
 cc4:	67 0f       	add	r22, r23
 cc6:	78 1f       	adc	r23, r24
 cc8:	89 1f       	adc	r24, r25
 cca:	9a 1f       	adc	r25, r26
 ccc:	a1 1d       	adc	r26, r1
 cce:	68 0f       	add	r22, r24
 cd0:	79 1f       	adc	r23, r25
 cd2:	8a 1f       	adc	r24, r26
 cd4:	91 1d       	adc	r25, r1
 cd6:	a1 1d       	adc	r26, r1
 cd8:	6a 0f       	add	r22, r26
 cda:	71 1d       	adc	r23, r1
 cdc:	81 1d       	adc	r24, r1
 cde:	91 1d       	adc	r25, r1
 ce0:	a1 1d       	adc	r26, r1
 ce2:	20 d0       	rcall	.+64     	; 0xd24 <__ultoa_invert+0x84>
 ce4:	09 f4       	brne	.+2      	; 0xce8 <__ultoa_invert+0x48>
 ce6:	68 94       	set
 ce8:	3f 91       	pop	r19
 cea:	2a e0       	ldi	r18, 0x0A	; 10
 cec:	26 9f       	mul	r18, r22
 cee:	11 24       	eor	r1, r1
 cf0:	30 19       	sub	r19, r0
 cf2:	30 5d       	subi	r19, 0xD0	; 208
 cf4:	31 93       	st	Z+, r19
 cf6:	de f6       	brtc	.-74     	; 0xcae <__ultoa_invert+0xe>
 cf8:	cf 01       	movw	r24, r30
 cfa:	08 95       	ret
 cfc:	46 2f       	mov	r20, r22
 cfe:	47 70       	andi	r20, 0x07	; 7
 d00:	40 5d       	subi	r20, 0xD0	; 208
 d02:	41 93       	st	Z+, r20
 d04:	b3 e0       	ldi	r27, 0x03	; 3
 d06:	0f d0       	rcall	.+30     	; 0xd26 <__ultoa_invert+0x86>
 d08:	c9 f7       	brne	.-14     	; 0xcfc <__ultoa_invert+0x5c>
 d0a:	f6 cf       	rjmp	.-20     	; 0xcf8 <__ultoa_invert+0x58>
 d0c:	46 2f       	mov	r20, r22
 d0e:	4f 70       	andi	r20, 0x0F	; 15
 d10:	40 5d       	subi	r20, 0xD0	; 208
 d12:	4a 33       	cpi	r20, 0x3A	; 58
 d14:	18 f0       	brcs	.+6      	; 0xd1c <__ultoa_invert+0x7c>
 d16:	49 5d       	subi	r20, 0xD9	; 217
 d18:	31 fd       	sbrc	r19, 1
 d1a:	40 52       	subi	r20, 0x20	; 32
 d1c:	41 93       	st	Z+, r20
 d1e:	02 d0       	rcall	.+4      	; 0xd24 <__ultoa_invert+0x84>
 d20:	a9 f7       	brne	.-22     	; 0xd0c <__ultoa_invert+0x6c>
 d22:	ea cf       	rjmp	.-44     	; 0xcf8 <__ultoa_invert+0x58>
 d24:	b4 e0       	ldi	r27, 0x04	; 4
 d26:	a6 95       	lsr	r26
 d28:	97 95       	ror	r25
 d2a:	87 95       	ror	r24
 d2c:	77 95       	ror	r23
 d2e:	67 95       	ror	r22
 d30:	ba 95       	dec	r27
 d32:	c9 f7       	brne	.-14     	; 0xd26 <__ultoa_invert+0x86>
 d34:	00 97       	sbiw	r24, 0x00	; 0
 d36:	61 05       	cpc	r22, r1
 d38:	71 05       	cpc	r23, r1
 d3a:	08 95       	ret
 d3c:	9b 01       	movw	r18, r22
 d3e:	ac 01       	movw	r20, r24
 d40:	0a 2e       	mov	r0, r26
 d42:	06 94       	lsr	r0
 d44:	57 95       	ror	r21
 d46:	47 95       	ror	r20
 d48:	37 95       	ror	r19
 d4a:	27 95       	ror	r18
 d4c:	ba 95       	dec	r27
 d4e:	c9 f7       	brne	.-14     	; 0xd42 <__ultoa_invert+0xa2>
 d50:	62 0f       	add	r22, r18
 d52:	73 1f       	adc	r23, r19
 d54:	84 1f       	adc	r24, r20
 d56:	95 1f       	adc	r25, r21
 d58:	a0 1d       	adc	r26, r0
 d5a:	08 95       	ret

00000d5c <__prologue_saves__>:
 d5c:	2f 92       	push	r2
 d5e:	3f 92       	push	r3
 d60:	4f 92       	push	r4
 d62:	5f 92       	push	r5
 d64:	6f 92       	push	r6
 d66:	7f 92       	push	r7
 d68:	8f 92       	push	r8
 d6a:	9f 92       	push	r9
 d6c:	af 92       	push	r10
 d6e:	bf 92       	push	r11
 d70:	cf 92       	push	r12
 d72:	df 92       	push	r13
 d74:	ef 92       	push	r14
 d76:	ff 92       	push	r15
 d78:	0f 93       	push	r16
 d7a:	1f 93       	push	r17
 d7c:	cf 93       	push	r28
 d7e:	df 93       	push	r29
 d80:	cd b7       	in	r28, 0x3d	; 61
 d82:	de b7       	in	r29, 0x3e	; 62
 d84:	ca 1b       	sub	r28, r26
 d86:	db 0b       	sbc	r29, r27
 d88:	0f b6       	in	r0, 0x3f	; 63
 d8a:	f8 94       	cli
 d8c:	de bf       	out	0x3e, r29	; 62
 d8e:	0f be       	out	0x3f, r0	; 63
 d90:	cd bf       	out	0x3d, r28	; 61
 d92:	09 94       	ijmp

00000d94 <__epilogue_restores__>:
 d94:	2a 88       	ldd	r2, Y+18	; 0x12
 d96:	39 88       	ldd	r3, Y+17	; 0x11
 d98:	48 88       	ldd	r4, Y+16	; 0x10
 d9a:	5f 84       	ldd	r5, Y+15	; 0x0f
 d9c:	6e 84       	ldd	r6, Y+14	; 0x0e
 d9e:	7d 84       	ldd	r7, Y+13	; 0x0d
 da0:	8c 84       	ldd	r8, Y+12	; 0x0c
 da2:	9b 84       	ldd	r9, Y+11	; 0x0b
 da4:	aa 84       	ldd	r10, Y+10	; 0x0a
 da6:	b9 84       	ldd	r11, Y+9	; 0x09
 da8:	c8 84       	ldd	r12, Y+8	; 0x08
 daa:	df 80       	ldd	r13, Y+7	; 0x07
 dac:	ee 80       	ldd	r14, Y+6	; 0x06
 dae:	fd 80       	ldd	r15, Y+5	; 0x05
 db0:	0c 81       	ldd	r16, Y+4	; 0x04
 db2:	1b 81       	ldd	r17, Y+3	; 0x03
 db4:	aa 81       	ldd	r26, Y+2	; 0x02
 db6:	b9 81       	ldd	r27, Y+1	; 0x01
 db8:	ce 0f       	add	r28, r30
 dba:	d1 1d       	adc	r29, r1
 dbc:	0f b6       	in	r0, 0x3f	; 63
 dbe:	f8 94       	cli
 dc0:	de bf       	out	0x3e, r29	; 62
 dc2:	0f be       	out	0x3f, r0	; 63
 dc4:	cd bf       	out	0x3d, r28	; 61
 dc6:	ed 01       	movw	r28, r26
 dc8:	08 95       	ret

00000dca <_exit>:
 dca:	f8 94       	cli

00000dcc <__stop_program>:
 dcc:	ff cf       	rjmp	.-2      	; 0xdcc <__stop_program>
