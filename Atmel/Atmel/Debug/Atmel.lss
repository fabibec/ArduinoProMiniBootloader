
Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  000005f8  0000068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b3  00800194  00800194  00000720  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088e  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b9  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000382  00000000  00000000  0000133f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  000016c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031c  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000629  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00002209  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 39       	cpi	r26, 0x94	; 148
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e9       	ldi	r26, 0x94	; 148
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 34       	cpi	r26, 0x47	; 71
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9f 01 	call	0x33e	; 0x33e <main>
  9e:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_send>:
}

void uart_send(uint8_t data) {
	
	// If send register empty and no XOFF
	while(!(UCSR0A & (1<<UDRE0)) && !sendBlock) {
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 fd       	sbrc	r25, 5
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <uart_send+0x12>
  b0:	90 91 9d 01 	lds	r25, 0x019D
  b4:	99 23       	and	r25, r25
  b6:	c9 f3       	breq	.-14     	; 0xaa <uart_send+0x4>
		;
	}
	UDR0 = data;
  b8:	80 93 c6 00 	sts	0x00C6, r24
  bc:	08 95       	ret

000000be <clearScreen>:
	
}

void clearScreen(){
	// Clear terminal
	uart_send(27); // ESC
  be:	8b e1       	ldi	r24, 0x1B	; 27
  c0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	uart_send('[');
  c4:	8b e5       	ldi	r24, 0x5B	; 91
  c6:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	uart_send('2');
  ca:	82 e3       	ldi	r24, 0x32	; 50
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	uart_send('J');
  d0:	8a e4       	ldi	r24, 0x4A	; 74
  d2:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>

	// Move cursor to start
	uart_send(27);
  d6:	8b e1       	ldi	r24, 0x1B	; 27
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	uart_send('[');
  dc:	8b e5       	ldi	r24, 0x5B	; 91
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	uart_send('H');
  e2:	88 e4       	ldi	r24, 0x48	; 72
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
  e8:	08 95       	ret

000000ea <uart_init>:
}

void uart_init() {
	// Configure baud rate
	UBRR0H = (BAUD_CONST >> 8);
  ea:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_CONST;
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable uart send and receive and uart receive complete interrupt
	UCSR0B |= ((1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0));
  f4:	e1 ec       	ldi	r30, 0xC1	; 193
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 69       	ori	r24, 0x98	; 152
  fc:	80 83       	st	Z, r24

    clearScreen();
  fe:	0e 94 5f 00 	call	0xbe	; 0xbe <clearScreen>
 102:	08 95       	ret

00000104 <send_xoff>:
	}

	return returnVal;
}

void send_xoff(){
 104:	cf 93       	push	r28
	uint8_t sreg = SREG;
 106:	cf b7       	in	r28, 0x3f	; 63
	cli();
 108:	f8 94       	cli
	x_status = XOFF;
 10a:	83 e1       	ldi	r24, 0x13	; 19
 10c:	80 93 01 01 	sts	0x0101, r24
	uart_send(XOFF);
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	SREG = sreg;
 114:	cf bf       	out	0x3f, r28	; 63
	
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <__vector_18>:
volatile uint8_t lastRead = 0;
volatile uint8_t counter = 0;
volatile uint8_t sendBlock = 0;
volatile uint8_t x_status = XON; 

ISR(USART_RX_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	uint8_t tmp = UDR0;
 13c:	80 91 c6 00 	lds	r24, 0x00C6
	
	// If XOFF is received block sending
	if (tmp == XOFF) {
 140:	83 31       	cpi	r24, 0x13	; 19
 142:	21 f4       	brne	.+8      	; 0x14c <__vector_18+0x32>
		sendBlock = 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 9d 01 	sts	0x019D, r24
 14a:	22 c0       	rjmp	.+68     	; 0x190 <__vector_18+0x76>
	} 
	// if XON is received allow sending
	else if(tmp == XON) {
 14c:	81 31       	cpi	r24, 0x11	; 17
 14e:	19 f4       	brne	.+6      	; 0x156 <__vector_18+0x3c>
		sendBlock = 0;
 150:	10 92 9d 01 	sts	0x019D, r1
 154:	1d c0       	rjmp	.+58     	; 0x190 <__vector_18+0x76>
	}
	else {
		receiveBuffer[lastReceived] = tmp;
 156:	e0 91 a0 01 	lds	r30, 0x01A0
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ef 55       	subi	r30, 0x5F	; 95
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	80 83       	st	Z, r24
		lastReceived = ((lastReceived + 1) % 32);
 162:	80 91 a0 01 	lds	r24, 0x01A0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	8f 71       	andi	r24, 0x1F	; 31
 16c:	90 78       	andi	r25, 0x80	; 128
 16e:	80 93 a0 01 	sts	0x01A0, r24
		counter++;
 172:	80 91 9e 01 	lds	r24, 0x019E
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	80 93 9e 01 	sts	0x019E, r24
		// If ring buffer has 26 elements stop receiving
		if(counter >= 22 && x_status==XON) {
 17c:	80 91 9e 01 	lds	r24, 0x019E
 180:	86 31       	cpi	r24, 0x16	; 22
 182:	30 f0       	brcs	.+12     	; 0x190 <__vector_18+0x76>
 184:	80 91 01 01 	lds	r24, 0x0101
 188:	81 31       	cpi	r24, 0x11	; 17
 18a:	11 f4       	brne	.+4      	; 0x190 <__vector_18+0x76>
			send_xoff();
 18c:	0e 94 82 00 	call	0x104	; 0x104 <send_xoff>
		}
	}
	 
	
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <send_xon>:
	x_status = XOFF;
	uart_send(XOFF);
	SREG = sreg;
	
}
void send_xon(){
 1b2:	cf 93       	push	r28
	uint8_t sreg = SREG;
 1b4:	cf b7       	in	r28, 0x3f	; 63
	cli();
 1b6:	f8 94       	cli
	x_status = XON;
 1b8:	81 e1       	ldi	r24, 0x11	; 17
 1ba:	80 93 01 01 	sts	0x0101, r24
	uart_send(XON);
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	SREG = sreg;
 1c2:	cf bf       	out	0x3f, r28	; 63
}
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <uart_receive>:
		;
	}
	UDR0 = data;
}

uint8_t uart_receive(){
 1c8:	cf 93       	push	r28
	UBRR0L = 0x0;
	UCSR0B = 0x0;
}

uint8_t bufferEmpty() {
	return (!counter);
 1ca:	80 91 9e 01 	lds	r24, 0x019E
	}
	UDR0 = data;
}

uint8_t uart_receive(){
	if(bufferEmpty()) {
 1ce:	88 23       	and	r24, r24
 1d0:	01 f1       	breq	.+64     	; 0x212 <uart_receive+0x4a>
		return '\0';
	}
	
	uint8_t returnVal = receiveBuffer[lastRead];	
 1d2:	e0 91 9f 01 	lds	r30, 0x019F
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	ef 55       	subi	r30, 0x5F	; 95
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	c0 81       	ld	r28, Z
	counter--;
 1de:	90 91 9e 01 	lds	r25, 0x019E
 1e2:	91 50       	subi	r25, 0x01	; 1
 1e4:	90 93 9e 01 	sts	0x019E, r25
	lastRead = (lastRead + 1) % 32;
 1e8:	20 91 9f 01 	lds	r18, 0x019F
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	2f 71       	andi	r18, 0x1F	; 31
 1f4:	30 78       	andi	r19, 0x80	; 128
 1f6:	20 93 9f 01 	sts	0x019F, r18
	
	// If ring buffer elements are less than or equal to 10 allow sending
	if (counter <= 10 && x_status == XOFF) {
 1fa:	90 91 9e 01 	lds	r25, 0x019E
 1fe:	9b 30       	cpi	r25, 0x0B	; 11
 200:	50 f4       	brcc	.+20     	; 0x216 <uart_receive+0x4e>
 202:	80 91 01 01 	lds	r24, 0x0101
 206:	83 31       	cpi	r24, 0x13	; 19
 208:	41 f4       	brne	.+16     	; 0x21a <uart_receive+0x52>
		send_xon();
 20a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <send_xon>
	}

	return returnVal;
 20e:	8c 2f       	mov	r24, r28
 210:	05 c0       	rjmp	.+10     	; 0x21c <uart_receive+0x54>
	UDR0 = data;
}

uint8_t uart_receive(){
	if(bufferEmpty()) {
		return '\0';
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	03 c0       	rjmp	.+6      	; 0x21c <uart_receive+0x54>
	// If ring buffer elements are less than or equal to 10 allow sending
	if (counter <= 10 && x_status == XOFF) {
		send_xon();
	}

	return returnVal;
 216:	8c 2f       	mov	r24, r28
 218:	01 c0       	rjmp	.+2      	; 0x21c <uart_receive+0x54>
 21a:	8c 2f       	mov	r24, r28
}
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <sendCRLF>:
	uart_send(XON);
	SREG = sreg;
}

void sendCRLF(){
    uart_send(0x0D);
 220:	8d e0       	ldi	r24, 0x0D	; 13
 222:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
    uart_send(0x0A);
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
 22c:	08 95       	ret

0000022e <sendString>:
}

void sendString(char * string){
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
    uint8_t index = 0;

    while(string[index] != 0){
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	51 f0       	breq	.+20     	; 0x250 <sendString+0x22>
    uart_send(0x0D);
    uart_send(0x0A);
}

void sendString(char * string){
    uint8_t index = 0;
 23c:	10 e0       	ldi	r17, 0x00	; 0

    while(string[index] != 0){
        uart_send(string[index]);
 23e:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
        index++;
 242:	1f 5f       	subi	r17, 0xFF	; 255
}

void sendString(char * string){
    uint8_t index = 0;

    while(string[index] != 0){
 244:	fe 01       	movw	r30, r28
 246:	e1 0f       	add	r30, r17
 248:	f1 1d       	adc	r31, r1
 24a:	80 81       	ld	r24, Z
 24c:	81 11       	cpse	r24, r1
 24e:	f7 cf       	rjmp	.-18     	; 0x23e <sendString+0x10>
        uart_send(string[index]);
        index++;
    }   
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	08 95       	ret

00000258 <runProgram>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	81 ee       	ldi	r24, 0xE1	; 225
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <runProgram+0x6>
 266:	00 c0       	rjmp	.+0      	; 0x268 <runProgram+0x10>
 268:	00 00       	nop
    //endString("Starting program...");
    
    _delay_ms(100);

    // Reset Timer
    TCCR1B = 0x0;
 26a:	10 92 81 00 	sts	0x0081, r1
    TCNT1 = 0x0;
 26e:	10 92 85 00 	sts	0x0085, r1
 272:	10 92 84 00 	sts	0x0084, r1
    TIMSK1 = 0x0;
 276:	10 92 6f 00 	sts	0x006F, r1
	
	sendString("Starting program...");
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
 282:	08 95       	ret

00000284 <__vector_13>:
void resetDataBuffer();



/* This Timer runs 4sec in order to signal a the timeout*/
ISR(TIMER1_OVF_vect){
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	4f 93       	push	r20
 294:	5f 93       	push	r21
 296:	6f 93       	push	r22
 298:	7f 93       	push	r23
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
    runProgram();
 2a6:	0e 94 2c 01 	call	0x258	; 0x258 <runProgram>
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <resetDataBuffer>:
	
	dataIndex = 0;
	resetDataBuffer();
}

void resetDataBuffer() {
 2cc:	e2 ec       	ldi	r30, 0xC2	; 194
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	82 e4       	ldi	r24, 0x42	; 66
 2d2:	92 e0       	ldi	r25, 0x02	; 2
	for (uint8_t i = 0; i < SPM_PAGESIZE; i++) {
		data[i] = 0xFF;
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	21 93       	st	Z+, r18
	dataIndex = 0;
	resetDataBuffer();
}

void resetDataBuffer() {
	for (uint8_t i = 0; i < SPM_PAGESIZE; i++) {
 2d8:	e8 17       	cp	r30, r24
 2da:	f9 07       	cpc	r31, r25
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <resetDataBuffer+0xa>
		data[i] = 0xFF;
	}
}
 2de:	08 95       	ret

000002e0 <programFlash>:
		//sendString(msg);
		if(i % 16 == 0) {sendCRLF();}
	}*/
	
	
	dataIndex = 0;
 2e0:	10 92 9c 01 	sts	0x019C, r1
	resetDataBuffer();
 2e4:	0e 94 66 01 	call	0x2cc	; 0x2cc <resetDataBuffer>
 2e8:	08 95       	ret

000002ea <hexDec>:

/* Converts 4-Byte Hex String into uint16_t and 2-Byte Hex String into uint8_t */
uint16_t hexDec(uint8_t *bytes, uint8_t num){
    uint16_t ret = 0;
    uint8_t c;
    for(uint8_t i = 0; i < num; i++){
 2ea:	66 23       	and	r22, r22
 2ec:	29 f1       	breq	.+74     	; 0x338 <hexDec+0x4e>
 2ee:	48 2f       	mov	r20, r24
 2f0:	e8 2f       	mov	r30, r24
 2f2:	f9 2f       	mov	r31, r25
    SREG = sreg;
}

/* Converts 4-Byte Hex String into uint16_t and 2-Byte Hex String into uint8_t */
uint16_t hexDec(uint8_t *bytes, uint8_t num){
    uint16_t ret = 0;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t c;
    for(uint8_t i = 0; i < num; i++){
        c = bytes[i];
 2f8:	31 91       	ld	r19, Z+
        if(c >= '0' && c <= '9'){
 2fa:	20 ed       	ldi	r18, 0xD0	; 208
 2fc:	23 0f       	add	r18, r19
 2fe:	2a 30       	cpi	r18, 0x0A	; 10
 300:	78 f0       	brcs	.+30     	; 0x320 <hexDec+0x36>
            c -= '0';
        } else if (c >= 'A' && c <= 'F'){
 302:	2f eb       	ldi	r18, 0xBF	; 191
 304:	23 0f       	add	r18, r19
 306:	26 30       	cpi	r18, 0x06	; 6
 308:	18 f4       	brcc	.+6      	; 0x310 <hexDec+0x26>
            c -= ('A' - 10);
 30a:	29 ec       	ldi	r18, 0xC9	; 201
 30c:	23 0f       	add	r18, r19
 30e:	08 c0       	rjmp	.+16     	; 0x320 <hexDec+0x36>
        } else if (c >= 'a' && c <= 'f'){
 310:	2f e9       	ldi	r18, 0x9F	; 159
 312:	23 0f       	add	r18, r19
 314:	26 30       	cpi	r18, 0x06	; 6
 316:	18 f4       	brcc	.+6      	; 0x31e <hexDec+0x34>
            c -= ('a' - 10);
 318:	29 ea       	ldi	r18, 0xA9	; 169
 31a:	23 0f       	add	r18, r19
 31c:	01 c0       	rjmp	.+2      	; 0x320 <hexDec+0x36>
/* Converts 4-Byte Hex String into uint16_t and 2-Byte Hex String into uint8_t */
uint16_t hexDec(uint8_t *bytes, uint8_t num){
    uint16_t ret = 0;
    uint8_t c;
    for(uint8_t i = 0; i < num; i++){
        c = bytes[i];
 31e:	23 2f       	mov	r18, r19
        } else if (c >= 'A' && c <= 'F'){
            c -= ('A' - 10);
        } else if (c >= 'a' && c <= 'f'){
            c -= ('a' - 10);
        }
        ret = (ret << 4) | c;
 320:	82 95       	swap	r24
 322:	92 95       	swap	r25
 324:	90 7f       	andi	r25, 0xF0	; 240
 326:	98 27       	eor	r25, r24
 328:	80 7f       	andi	r24, 0xF0	; 240
 32a:	98 27       	eor	r25, r24
 32c:	82 2b       	or	r24, r18
 32e:	2e 2f       	mov	r18, r30
 330:	24 1b       	sub	r18, r20

/* Converts 4-Byte Hex String into uint16_t and 2-Byte Hex String into uint8_t */
uint16_t hexDec(uint8_t *bytes, uint8_t num){
    uint16_t ret = 0;
    uint8_t c;
    for(uint8_t i = 0; i < num; i++){
 332:	26 17       	cp	r18, r22
 334:	08 f3       	brcs	.-62     	; 0x2f8 <hexDec+0xe>
 336:	08 95       	ret
    SREG = sreg;
}

/* Converts 4-Byte Hex String into uint16_t and 2-Byte Hex String into uint8_t */
uint16_t hexDec(uint8_t *bytes, uint8_t num){
    uint16_t ret = 0;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
            c -= ('a' - 10);
        }
        ret = (ret << 4) | c;
    } 
    return ret;
}
 33c:	08 95       	ret

0000033e <main>:
    //uint8_t temp = MCUCR;
    //MCUCR = temp | (1 << IVCE);
    //MCUCR = temp | (1 << IVSEL);

    // Setup UART
    uart_init();
 33e:	0e 94 75 00 	call	0xea	; 0xea <uart_init>
    sendString("<p> -> flashing mode | <any other key> -> continue to the application");
 342:	86 e1       	ldi	r24, 0x16	; 22
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
    sendCRLF();
 34a:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>

    // Setup Timer1 to run (4 secs.) -> prescaler 1024
    TCCR1B |= ((1 << CS12) | (1 << CS10));
 34e:	e1 e8       	ldi	r30, 0x81	; 129
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	85 60       	ori	r24, 0x05	; 5
 356:	80 83       	st	Z, r24
    // 65536 - 62500
    TCNT1 = 3036;
 358:	8c ed       	ldi	r24, 0xDC	; 220
 35a:	9b e0       	ldi	r25, 0x0B	; 11
 35c:	90 93 85 00 	sts	0x0085, r25
 360:	80 93 84 00 	sts	0x0084, r24
    TIMSK1 = (1 << TOIE1);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 6f 00 	sts	0x006F, r24

    sei();
 36a:	78 94       	sei

    // Mode selection 
    uint8_t c;
    while((c = uart_receive()) == '\0') ;
 36c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_receive>
 370:	88 23       	and	r24, r24
 372:	e1 f3       	breq	.-8      	; 0x36c <main+0x2e>
	
    if(c != 'p'){
 374:	80 37       	cpi	r24, 0x70	; 112
 376:	11 f0       	breq	.+4      	; 0x37c <main+0x3e>
        runProgram();
 378:	0e 94 2c 01 	call	0x258	; 0x258 <runProgram>
    }

    // Disable Timer
    TIMSK1 = 0x0;
 37c:	10 92 6f 00 	sts	0x006F, r1

    // Receive program data from serial
    sendString("Please enter .hex code");
 380:	8c e5       	ldi	r24, 0x5C	; 92
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
    sendCRLF();
 388:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
	
	// Initialize Data Buffer
	resetDataBuffer();
 38c:	0e 94 66 01 	call	0x2cc	; 0x2cc <resetDataBuffer>

                    if(pageNumber != currentPage){
                        programFlash();
                        // TODO: Hier können lücken entstehen !!! && hier den dataIndex auf richtige addresse setzen!!!
                        currentPage = pageNumber;
						dataIndex = pageAddress % SPM_PAGESIZE;
 390:	c2 e4       	ldi	r28, 0x42	; 66
 392:	d2 e0       	ldi	r29, 0x02	; 2
						}
						
                        if(currentDataLength == dataLength){
                            // Go to the next state
							currentDataLength = 0;
                            state = GET_CHECKSUM;
 394:	0f 2e       	mov	r0, r31
 396:	f6 e0       	ldi	r31, 0x06	; 6
 398:	ef 2e       	mov	r14, r31
 39a:	f0 2d       	mov	r31, r0
                    // Reset for next state
                    byteSum += recordType;
                    bytesReceived = 0;

                    // Skip GET_DATA state for EOF Records (Type 01)
                    state = (recordType == 1) ? GET_CHECKSUM : GET_DATA;               
 39c:	0f 2e       	mov	r0, r31
 39e:	f5 e0       	ldi	r31, 0x05	; 5
 3a0:	ff 2e       	mov	r15, r31
 3a2:	f0 2d       	mov	r31, r0
                    snprintf(msg, 200, "Len: %u, Adr: %u, RecType: %u, DataIndex: %u", dataLength, pageAddress, recordType, dataIndex);
                    sendString(msg);
                    sendCRLF();*/
                    
                    bytesReceived = 0;
                    state = WAIT_FOR_START;
 3a4:	11 e0       	ldi	r17, 0x01	; 1
                    // Add up Bytes for checksum
                    byteSum += dataLength;

                    // Reset for next state
                    bytesReceived = 0;
                    state = GET_ADDRESS;
 3a6:	03 e0       	ldi	r16, 0x03	; 3
	// Initialize Data Buffer
	resetDataBuffer();
	
    // Wait for starting character
    while(1){
        while(!(c = uart_receive())) ;
 3a8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_receive>
 3ac:	88 23       	and	r24, r24
 3ae:	e1 f3       	breq	.-8      	; 0x3a8 <main+0x6a>

        switch(state){
 3b0:	90 91 00 01 	lds	r25, 0x0100
 3b4:	93 30       	cpi	r25, 0x03	; 3
 3b6:	e1 f1       	breq	.+120    	; 0x430 <main+0xf2>
 3b8:	28 f4       	brcc	.+10     	; 0x3c4 <main+0x86>
 3ba:	91 30       	cpi	r25, 0x01	; 1
 3bc:	61 f0       	breq	.+24     	; 0x3d6 <main+0x98>
 3be:	92 30       	cpi	r25, 0x02	; 2
 3c0:	b1 f0       	breq	.+44     	; 0x3ee <main+0xb0>
 3c2:	f2 cf       	rjmp	.-28     	; 0x3a8 <main+0x6a>
 3c4:	95 30       	cpi	r25, 0x05	; 5
 3c6:	09 f4       	brne	.+2      	; 0x3ca <main+0x8c>
 3c8:	97 c0       	rjmp	.+302    	; 0x4f8 <main+0x1ba>
 3ca:	08 f4       	brcc	.+2      	; 0x3ce <main+0x90>
 3cc:	6e c0       	rjmp	.+220    	; 0x4aa <main+0x16c>
 3ce:	96 30       	cpi	r25, 0x06	; 6
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <main+0x96>
 3d2:	db c0       	rjmp	.+438    	; 0x58a <main+0x24c>
 3d4:	e9 cf       	rjmp	.-46     	; 0x3a8 <main+0x6a>
            case WAIT_FOR_START:
                if(c == ':'){
 3d6:	8a 33       	cpi	r24, 0x3A	; 58
 3d8:	39 f7       	brne	.-50     	; 0x3a8 <main+0x6a>
                    uart_send(':');
 3da:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                    // Reset for next state
                    bytesReceived = 0;
 3de:	10 92 9a 01 	sts	0x019A, r1
                    byteSum = 0;
 3e2:	10 92 44 02 	sts	0x0244, r1
                    state = GET_DATA_LENGTH;
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	80 93 00 01 	sts	0x0100, r24
 3ec:	dd cf       	rjmp	.-70     	; 0x3a8 <main+0x6a>
                }    
            break;
            case GET_DATA_LENGTH:
                hexBuffer[bytesReceived++] = c;
 3ee:	e0 91 9a 01 	lds	r30, 0x019A
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	9e 0f       	add	r25, r30
 3f6:	90 93 9a 01 	sts	0x019A, r25
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	ea 56       	subi	r30, 0x6A	; 106
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	80 83       	st	Z, r24
                uart_send(c);
 402:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                if(bytesReceived == 2){
 406:	80 91 9a 01 	lds	r24, 0x019A
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	69 f6       	brne	.-102    	; 0x3a8 <main+0x6a>
                    // Decode data length
                    dataLength = (uint8_t) hexDec(hexBuffer, 2); 
 40e:	62 e0       	ldi	r22, 0x02	; 2
 410:	86 e9       	ldi	r24, 0x96	; 150
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 75 01 	call	0x2ea	; 0x2ea <hexDec>
 418:	80 93 46 02 	sts	0x0246, r24

                    // Add up Bytes for checksum
                    byteSum += dataLength;
 41c:	90 91 44 02 	lds	r25, 0x0244
 420:	89 0f       	add	r24, r25
 422:	80 93 44 02 	sts	0x0244, r24

                    // Reset for next state
                    bytesReceived = 0;
 426:	10 92 9a 01 	sts	0x019A, r1
                    state = GET_ADDRESS;
 42a:	00 93 00 01 	sts	0x0100, r16
 42e:	bc cf       	rjmp	.-136    	; 0x3a8 <main+0x6a>
                }
            break;
            case GET_ADDRESS:
                hexBuffer[bytesReceived++] = c;
 430:	e0 91 9a 01 	lds	r30, 0x019A
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	9e 0f       	add	r25, r30
 438:	90 93 9a 01 	sts	0x019A, r25
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	ea 56       	subi	r30, 0x6A	; 106
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	80 83       	st	Z, r24
                uart_send(c);
 444:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                if(bytesReceived == 4){
 448:	80 91 9a 01 	lds	r24, 0x019A
 44c:	84 30       	cpi	r24, 0x04	; 4
 44e:	09 f0       	breq	.+2      	; 0x452 <main+0x114>
 450:	ab cf       	rjmp	.-170    	; 0x3a8 <main+0x6a>
                    // Decode absolute page address
                    pageAddress = hexDec(hexBuffer, 4);
 452:	64 e0       	ldi	r22, 0x04	; 4
 454:	86 e9       	ldi	r24, 0x96	; 150
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 75 01 	call	0x2ea	; 0x2ea <hexDec>
 45c:	90 93 43 02 	sts	0x0243, r25
 460:	80 93 42 02 	sts	0x0242, r24
                    
                    // Update Checksum
                    byteSum += (uint8_t) pageAddress;
 464:	20 91 44 02 	lds	r18, 0x0244
 468:	28 0f       	add	r18, r24
                    byteSum += (uint8_t) (pageAddress >> 8);
 46a:	29 0f       	add	r18, r25
 46c:	20 93 44 02 	sts	0x0244, r18
                    
                    // Calculate relative page address
                    uint16_t pageNumber = pageAddress / SPM_PAGESIZE;
 470:	6c 01       	movw	r12, r24
 472:	cc 0c       	add	r12, r12
 474:	cd 2c       	mov	r12, r13
 476:	cc 1c       	adc	r12, r12
 478:	dd 08       	sbc	r13, r13
 47a:	d1 94       	neg	r13

                    if(pageNumber != currentPage){
 47c:	80 91 94 01 	lds	r24, 0x0194
 480:	90 91 95 01 	lds	r25, 0x0195
 484:	c8 16       	cp	r12, r24
 486:	d9 06       	cpc	r13, r25
 488:	51 f0       	breq	.+20     	; 0x49e <main+0x160>
                        programFlash();
 48a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <programFlash>
                        // TODO: Hier können lücken entstehen !!! && hier den dataIndex auf richtige addresse setzen!!!
                        currentPage = pageNumber;
 48e:	d0 92 95 01 	sts	0x0195, r13
 492:	c0 92 94 01 	sts	0x0194, r12
						dataIndex = pageAddress % SPM_PAGESIZE;
 496:	88 81       	ld	r24, Y
 498:	8f 77       	andi	r24, 0x7F	; 127
 49a:	80 93 9c 01 	sts	0x019C, r24
                    }

                    // Reset for next state
                    bytesReceived = 0;
 49e:	10 92 9a 01 	sts	0x019A, r1
                    state = GET_RECORD_TYPE;
 4a2:	84 e0       	ldi	r24, 0x04	; 4
 4a4:	80 93 00 01 	sts	0x0100, r24
 4a8:	7f cf       	rjmp	.-258    	; 0x3a8 <main+0x6a>
                }
            break;
            case GET_RECORD_TYPE:
                hexBuffer[bytesReceived++] = c;
 4aa:	e0 91 9a 01 	lds	r30, 0x019A
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	9e 0f       	add	r25, r30
 4b2:	90 93 9a 01 	sts	0x019A, r25
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	ea 56       	subi	r30, 0x6A	; 106
 4ba:	fe 4f       	sbci	r31, 0xFE	; 254
 4bc:	80 83       	st	Z, r24
                uart_send(c);
 4be:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                if(bytesReceived == 2){
 4c2:	80 91 9a 01 	lds	r24, 0x019A
 4c6:	82 30       	cpi	r24, 0x02	; 2
 4c8:	09 f0       	breq	.+2      	; 0x4cc <main+0x18e>
 4ca:	6e cf       	rjmp	.-292    	; 0x3a8 <main+0x6a>
                    // Decode record type
                    recordType = (uint8_t) hexDec(hexBuffer, 2);
 4cc:	62 e0       	ldi	r22, 0x02	; 2
 4ce:	86 e9       	ldi	r24, 0x96	; 150
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 75 01 	call	0x2ea	; 0x2ea <hexDec>
 4d6:	80 93 c1 01 	sts	0x01C1, r24

                    // Reset for next state
                    byteSum += recordType;
 4da:	90 91 44 02 	lds	r25, 0x0244
 4de:	98 0f       	add	r25, r24
 4e0:	90 93 44 02 	sts	0x0244, r25
                    bytesReceived = 0;
 4e4:	10 92 9a 01 	sts	0x019A, r1

                    // Skip GET_DATA state for EOF Records (Type 01)
                    state = (recordType == 1) ? GET_CHECKSUM : GET_DATA;               
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	11 f4       	brne	.+4      	; 0x4f0 <main+0x1b2>
 4ec:	8e 2d       	mov	r24, r14
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <main+0x1b4>
 4f0:	8f 2d       	mov	r24, r15
 4f2:	80 93 00 01 	sts	0x0100, r24
 4f6:	58 cf       	rjmp	.-336    	; 0x3a8 <main+0x6a>
                }
            break;
            case GET_DATA:
                switch (recordType){
 4f8:	90 91 c1 01 	lds	r25, 0x01C1
 4fc:	91 11       	cpse	r25, r1
 4fe:	54 cf       	rjmp	.-344    	; 0x3a8 <main+0x6a>
                case DATA_RECORD:
                    hexBuffer[bytesReceived++] = c;
 500:	e0 91 9a 01 	lds	r30, 0x019A
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	9e 0f       	add	r25, r30
 508:	90 93 9a 01 	sts	0x019A, r25
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	ea 56       	subi	r30, 0x6A	; 106
 510:	fe 4f       	sbci	r31, 0xFE	; 254
 512:	80 83       	st	Z, r24
                    uart_send(c);
 514:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                    if(bytesReceived == 2){
 518:	80 91 9a 01 	lds	r24, 0x019A
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	09 f0       	breq	.+2      	; 0x522 <main+0x1e4>
 520:	43 cf       	rjmp	.-378    	; 0x3a8 <main+0x6a>
                        // Collect data and add up checksum
                        data[dataIndex] = (uint8_t) hexDec(hexBuffer, 2);
 522:	d0 90 9c 01 	lds	r13, 0x019C
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	86 e9       	ldi	r24, 0x96	; 150
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 75 01 	call	0x2ea	; 0x2ea <hexDec>
 530:	ed 2d       	mov	r30, r13
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	ee 53       	subi	r30, 0x3E	; 62
 536:	fe 4f       	sbci	r31, 0xFE	; 254
 538:	80 83       	st	Z, r24
                        byteSum += data[dataIndex];
 53a:	90 91 44 02 	lds	r25, 0x0244
 53e:	89 0f       	add	r24, r25
 540:	80 93 44 02 	sts	0x0244, r24
                        
                        currentDataLength++;	
 544:	80 91 9b 01 	lds	r24, 0x019B
 548:	8f 5f       	subi	r24, 0xFF	; 255
 54a:	80 93 9b 01 	sts	0x019B, r24
						dataIndex++;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	8d 0d       	add	r24, r13
 552:	80 93 9c 01 	sts	0x019C, r24
						
						bytesReceived = 0;
 556:	10 92 9a 01 	sts	0x019A, r1
						
						if (dataIndex == 128) {
 55a:	80 38       	cpi	r24, 0x80	; 128
 55c:	59 f4       	brne	.+22     	; 0x574 <main+0x236>
							programFlash();
 55e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <programFlash>
							currentPage++;
 562:	80 91 94 01 	lds	r24, 0x0194
 566:	90 91 95 01 	lds	r25, 0x0195
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	90 93 95 01 	sts	0x0195, r25
 570:	80 93 94 01 	sts	0x0194, r24
						}
						
                        if(currentDataLength == dataLength){
 574:	90 91 9b 01 	lds	r25, 0x019B
 578:	80 91 46 02 	lds	r24, 0x0246
 57c:	98 13       	cpse	r25, r24
 57e:	14 cf       	rjmp	.-472    	; 0x3a8 <main+0x6a>
                            // Go to the next state
							currentDataLength = 0;
 580:	10 92 9b 01 	sts	0x019B, r1
                            state = GET_CHECKSUM;
 584:	e0 92 00 01 	sts	0x0100, r14
 588:	0f cf       	rjmp	.-482    	; 0x3a8 <main+0x6a>
                default:
                    break;
                }
            break;
            case GET_CHECKSUM:
                hexBuffer[bytesReceived++] = c;
 58a:	e0 91 9a 01 	lds	r30, 0x019A
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	9e 0f       	add	r25, r30
 592:	90 93 9a 01 	sts	0x019A, r25
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	ea 56       	subi	r30, 0x6A	; 106
 59a:	fe 4f       	sbci	r31, 0xFE	; 254
 59c:	80 83       	st	Z, r24
                uart_send(c);
 59e:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
                if(bytesReceived == 2){
 5a2:	80 91 9a 01 	lds	r24, 0x019A
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	09 f0       	breq	.+2      	; 0x5ac <main+0x26e>
 5aa:	fe ce       	rjmp	.-516    	; 0x3a8 <main+0x6a>
                    checksum = (uint8_t) hexDec(hexBuffer, 2);
 5ac:	62 e0       	ldi	r22, 0x02	; 2
 5ae:	86 e9       	ldi	r24, 0x96	; 150
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 75 01 	call	0x2ea	; 0x2ea <hexDec>
 5b6:	80 93 45 02 	sts	0x0245, r24
                    
                    // Calculate checksum -> build 2th's complement and check for equality
                    byteSum = ~byteSum + 1;
 5ba:	90 91 44 02 	lds	r25, 0x0244
 5be:	91 95       	neg	r25
 5c0:	90 93 44 02 	sts	0x0244, r25
					
					if(byteSum != checksum){
 5c4:	89 17       	cp	r24, r25
 5c6:	31 f0       	breq	.+12     	; 0x5d4 <main+0x296>
						//char msg[75];
						//snprintf(msg, 75, "calc: %u, act: %u", byteSum, checksum);
						//sendString(msg);
						sendString("Checksum mismatch. Please Reset!");
 5c8:	83 e7       	ldi	r24, 0x73	; 115
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	0e 94 17 01 	call	0x22e	; 0x22e <sendString>
						state = WAIT_FOR_START;
 5d0:	10 93 00 01 	sts	0x0100, r17
					}
					
					// If dataIndex == 0 -> page is empty -> no need to flash
					if(recordType == EOF_RECORD && dataIndex != 0){
 5d4:	80 91 c1 01 	lds	r24, 0x01C1
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	29 f4       	brne	.+10     	; 0x5e6 <main+0x2a8>
 5dc:	80 91 9c 01 	lds	r24, 0x019C
 5e0:	81 11       	cpse	r24, r1
						programFlash();  
 5e2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <programFlash>
					sendCRLF();
                    snprintf(msg, 200, "Len: %u, Adr: %u, RecType: %u, DataIndex: %u", dataLength, pageAddress, recordType, dataIndex);
                    sendString(msg);
                    sendCRLF();*/
                    
                    bytesReceived = 0;
 5e6:	10 92 9a 01 	sts	0x019A, r1
                    state = WAIT_FOR_START;
 5ea:	10 93 00 01 	sts	0x0100, r17
                    sendCRLF();
 5ee:	0e 94 10 01 	call	0x220	; 0x220 <sendCRLF>
 5f2:	da ce       	rjmp	.-588    	; 0x3a8 <main+0x6a>

000005f4 <_exit>:
 5f4:	f8 94       	cli

000005f6 <__stop_program>:
 5f6:	ff cf       	rjmp	.-2      	; 0x5f6 <__stop_program>
