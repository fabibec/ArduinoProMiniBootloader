
./uart/main.bin:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__ctors_end>
   4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
   8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
   c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  10:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  14:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  18:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  1c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  20:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  24:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  28:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  2c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  30:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_13>
  38:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  3c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  40:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  44:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  48:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_18>
  4c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  50:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  54:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  58:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  5c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  60:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  64:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	07 ec       	Address 0x0000000000000068 is out of bounds.
.word	0xffff	; ????

00000069 <menu>:
  69:	ec 01 da 01 c3 01 b3 01 a4 01 88 01 70 01           ............p.

00000077 <menuTextRunningInfo>:
  77:	54 68 65 20 54 69 6d 65 72 20 69 73 20 63 75 72     The Timer is cur
  87:	72 65 6e 74 6c 79 20 72 75 6e 6e 69 6e 67 2c 20     rently running, 
  97:	70 6c 65 61 73 65 20 73 74 6f 70 20 74 68 65 20     please stop the 
  a7:	54 69 6d 65 72 20 74 6f 20 73 65 74 20 73 74 61     Timer to set sta
  b7:	72 74 69 6e 67 20 76 61 6c 75 65 21 00              rting value!.

000000c4 <menuTextWrongInput>:
  c4:	49 6e 76 61 6c 69 64 20 49 6e 70 75 74 2c 20 70     Invalid Input, p
  d4:	6c 65 61 73 65 20 65 6e 74 65 72 20 61 20 6e 75     lease enter a nu
  e4:	6d 62 65 72 20 62 65 74 77 65 65 6e 20 31 20 61     mber between 1 a
  f4:	6e 64 20 37 00                                      nd 7.

000000f9 <menuTextError>:
  f9:	45 72 72 6f 72 21 20 50 6c 65 61 73 65 20 63 68     Error! Please ch
 109:	6f 6f 73 65 20 61 63 74 69 6f 6e 20 62 65 74 77     oose action betw
 119:	65 65 6e 20 31 20 61 6e 64 20 34 2e 00              een 1 and 4..

00000126 <menuTextConfigStartVal>:
 126:	53 74 61 72 74 69 6e 67 20 56 61 6c 75 65 20 28     Starting Value (
 136:	31 2d 37 29 3a 20 00                                1-7): .

0000013d <menuTextReturn>:
 13d:	50 72 65 73 73 20 52 45 54 55 52 4e 20 74 6f 20     Press RETURN to 
 14d:	67 6f 20 62 61 63 6b 20 74 6f 20 4d 61 69 6e 20     go back to Main 
 15d:	4d 65 6e 75 00                                      Menu.

00000162 <menuTextInput>:
 162:	49 6e 70 75 74 20 28 31 2d 34 29 3a 20 00           Input (1-4): .

00000170 <menuTextAction4>:
 170:	34 20 2d 20 50 72 69 6e 74 20 53 74 61 72 74 69     4 - Print Starti
 180:	6e 67 20 54 69 6d 65 00                             ng Time.

00000188 <menuTextAction3>:
 188:	33 20 2d 20 43 6f 6e 66 69 67 75 72 65 20 53 74     3 - Configure St
 198:	61 72 74 69 6e 67 20 54 69 6d 65 00                 arting Time.

000001a4 <menuTextAction2>:
 1a4:	32 20 2d 20 53 74 6f 70 20 54 69 6d 65 72 00        2 - Stop Timer.

000001b3 <menuTextAction1>:
 1b3:	31 20 2d 20 53 74 61 72 74 20 54 69 6d 65 72 00     1 - Start Timer.

000001c3 <menuTextAction>:
 1c3:	43 68 6f 6f 73 65 20 61 6e 20 61 63 74 69 6f 6e     Choose an action
 1d3:	20 28 31 2d 34 29 00                                 (1-4).

000001da <menuTextDivider>:
 1da:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
 1ea:	2d 00                                               -.

000001ec <menuTextHeader>:
 1ec:	46 61 62 69 27 73 20 26 20 46 6c 6f 27 73 20 46     Fabi's & Flo's F
 1fc:	61 6e 63 79 20 54 69 6d 65 72 3a 00 00 00           ancy Timer:...

0000020a <__ctors_end>:
 20a:	11 24       	eor	r1, r1
 20c:	1f be       	out	0x3f, r1	; 63
 20e:	cf ef       	ldi	r28, 0xFF	; 255
 210:	d8 e0       	ldi	r29, 0x08	; 8
 212:	de bf       	out	0x3e, r29	; 62
 214:	cd bf       	out	0x3d, r28	; 61

00000216 <__do_copy_data>:
 216:	11 e0       	ldi	r17, 0x01	; 1
 218:	a0 e0       	ldi	r26, 0x00	; 0
 21a:	b1 e0       	ldi	r27, 0x01	; 1
 21c:	e8 e5       	ldi	r30, 0x58	; 88
 21e:	fe e0       	ldi	r31, 0x0E	; 14
 220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
 222:	05 90       	lpm	r0, Z+
 224:	0d 92       	st	X+, r0
 226:	ae 31       	cpi	r26, 0x1E	; 30
 228:	b1 07       	cpc	r27, r17
 22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	ae e1       	ldi	r26, 0x1E	; 30
 230:	b1 e0       	ldi	r27, 0x01	; 1
 232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
 234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
 236:	a8 39       	cpi	r26, 0x98	; 152
 238:	b2 07       	cpc	r27, r18
 23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
 23c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <main>
 240:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <_exit>

00000244 <__bad_interrupt>:
 244:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000248 <__vector_13>:

// Create Timer Array for timer handling
volatile timerObject timerArray[5] = {{0}};

// Timer Interrupts are thrown every 100 microsecond
ISR(TIMER1_OVF_vect){
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	df 92       	push	r13
 254:	ef 92       	push	r14
 256:	ff 92       	push	r15
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	25 97       	sbiw	r28, 0x05	; 5
 27e:	de bf       	out	0x3e, r29	; 62
 280:	cd bf       	out	0x3d, r28	; 61
	TCNT1 = TIMER_START_VAL;
 282:	87 e3       	ldi	r24, 0x37	; 55
 284:	9f ef       	ldi	r25, 0xFF	; 255
 286:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 28a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	return timerArray[timer].running;
}

inline void handleTimer(){
	// Local array for single callback handle if duplicate call to handleTimer occurs (fast interrupts)
	bool executeCallback[5] = {0};
 28e:	fe 01       	movw	r30, r28
 290:	31 96       	adiw	r30, 0x01	; 1
 292:	85 e0       	ldi	r24, 0x05	; 5
 294:	df 01       	movw	r26, r30
 296:	1d 92       	st	X+, r1
 298:	8a 95       	dec	r24
 29a:	e9 f7       	brne	.-6      	; 0x296 <__vector_13+0x4e>
 29c:	8f 01       	movw	r16, r30
 29e:	df 01       	movw	r26, r30
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
	// Enable Timer Overflow Interrupt
	TIMSK1 |= (1 << TOIE1);
}

inline bool isRunning(timerType timer) {
	return timerArray[timer].running;
 2a4:	2b e0       	ldi	r18, 0x0B	; 11
	bool executeCallback[5] = {0};
	for(uint8_t i = 0; i<5; i++) {
		if(isRunning(i)) {
			if (timerArray[i].timeLeft <= 100) {
				timerArray[i].timeLeft = timerArray[i].interval;
				executeCallback[i] = true;
 2a6:	31 e0       	ldi	r19, 0x01	; 1
	// Enable Timer Overflow Interrupt
	TIMSK1 |= (1 << TOIE1);
}

inline bool isRunning(timerType timer) {
	return timerArray[timer].running;
 2a8:	28 9f       	mul	r18, r24
 2aa:	f0 01       	movw	r30, r0
 2ac:	29 9f       	mul	r18, r25
 2ae:	f0 0d       	add	r31, r0
 2b0:	11 24       	eor	r1, r1
 2b2:	e0 5a       	subi	r30, 0xA0	; 160
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	40 81       	ld	r20, Z

inline void handleTimer(){
	// Local array for single callback handle if duplicate call to handleTimer occurs (fast interrupts)
	bool executeCallback[5] = {0};
	for(uint8_t i = 0; i<5; i++) {
		if(isRunning(i)) {
 2b8:	44 23       	and	r20, r20
 2ba:	f9 f0       	breq	.+62     	; 0x2fa <__vector_13+0xb2>
			if (timerArray[i].timeLeft <= 100) {
 2bc:	47 81       	ldd	r20, Z+7	; 0x07
 2be:	50 85       	ldd	r21, Z+8	; 0x08
 2c0:	61 85       	ldd	r22, Z+9	; 0x09
 2c2:	72 85       	ldd	r23, Z+10	; 0x0a
 2c4:	45 36       	cpi	r20, 0x65	; 101
 2c6:	51 05       	cpc	r21, r1
 2c8:	61 05       	cpc	r22, r1
 2ca:	71 05       	cpc	r23, r1
 2cc:	50 f4       	brcc	.+20     	; 0x2e2 <__vector_13+0x9a>
				timerArray[i].timeLeft = timerArray[i].interval;
 2ce:	43 81       	ldd	r20, Z+3	; 0x03
 2d0:	54 81       	ldd	r21, Z+4	; 0x04
 2d2:	65 81       	ldd	r22, Z+5	; 0x05
 2d4:	76 81       	ldd	r23, Z+6	; 0x06
 2d6:	47 83       	std	Z+7, r20	; 0x07
 2d8:	50 87       	std	Z+8, r21	; 0x08
 2da:	61 87       	std	Z+9, r22	; 0x09
 2dc:	72 87       	std	Z+10, r23	; 0x0a
				executeCallback[i] = true;
 2de:	3c 93       	st	X, r19
 2e0:	0c c0       	rjmp	.+24     	; 0x2fa <__vector_13+0xb2>
			} else {
				timerArray[i].timeLeft -= 100;
 2e2:	47 81       	ldd	r20, Z+7	; 0x07
 2e4:	50 85       	ldd	r21, Z+8	; 0x08
 2e6:	61 85       	ldd	r22, Z+9	; 0x09
 2e8:	72 85       	ldd	r23, Z+10	; 0x0a
 2ea:	44 56       	subi	r20, 0x64	; 100
 2ec:	51 09       	sbc	r21, r1
 2ee:	61 09       	sbc	r22, r1
 2f0:	71 09       	sbc	r23, r1
 2f2:	47 83       	std	Z+7, r20	; 0x07
 2f4:	50 87       	std	Z+8, r21	; 0x08
 2f6:	61 87       	std	Z+9, r22	; 0x09
 2f8:	72 87       	std	Z+10, r23	; 0x0a
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	11 96       	adiw	r26, 0x01	; 1
}

inline void handleTimer(){
	// Local array for single callback handle if duplicate call to handleTimer occurs (fast interrupts)
	bool executeCallback[5] = {0};
	for(uint8_t i = 0; i<5; i++) {
 2fe:	85 30       	cpi	r24, 0x05	; 5
 300:	91 05       	cpc	r25, r1
 302:	91 f6       	brne	.-92     	; 0x2a8 <__vector_13+0x60>
			} else {
				timerArray[i].timeLeft -= 100;
			}
		}
	}
	sei();
 304:	78 94       	sei
 306:	e1 2c       	mov	r14, r1
 308:	f1 2c       	mov	r15, r1
	for(uint8_t i = 0; i<5; i++) {
		if(executeCallback[i]) {
			timerArray[i].callback();
 30a:	8b e0       	ldi	r24, 0x0B	; 11
 30c:	d8 2e       	mov	r13, r24
			}
		}
	}
	sei();
	for(uint8_t i = 0; i<5; i++) {
		if(executeCallback[i]) {
 30e:	f8 01       	movw	r30, r16
 310:	81 91       	ld	r24, Z+
 312:	8f 01       	movw	r16, r30
 314:	88 23       	and	r24, r24
 316:	59 f0       	breq	.+22     	; 0x32e <__vector_13+0xe6>
			timerArray[i].callback();
 318:	de 9c       	mul	r13, r14
 31a:	f0 01       	movw	r30, r0
 31c:	df 9c       	mul	r13, r15
 31e:	f0 0d       	add	r31, r0
 320:	11 24       	eor	r1, r1
 322:	e0 5a       	subi	r30, 0xA0	; 160
 324:	fe 4f       	sbci	r31, 0xFE	; 254
 326:	01 80       	ldd	r0, Z+1	; 0x01
 328:	f2 81       	ldd	r31, Z+2	; 0x02
 32a:	e0 2d       	mov	r30, r0
 32c:	09 95       	icall
 32e:	ff ef       	ldi	r31, 0xFF	; 255
 330:	ef 1a       	sub	r14, r31
 332:	ff 0a       	sbc	r15, r31
				timerArray[i].timeLeft -= 100;
			}
		}
	}
	sei();
	for(uint8_t i = 0; i<5; i++) {
 334:	85 e0       	ldi	r24, 0x05	; 5
 336:	e8 16       	cp	r14, r24
 338:	f1 04       	cpc	r15, r1
 33a:	49 f7       	brne	.-46     	; 0x30e <__vector_13+0xc6>

// Timer Interrupts are thrown every 100 microsecond
ISR(TIMER1_OVF_vect){
	TCNT1 = TIMER_START_VAL;
	handleTimer();
}
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	df 90       	pop	r13
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <timer_init>:

// Configure registers for timer interrupt and prescaler
void timer_init() {
	// Timer1: Prescaler CLK/8 --> 0,5 mikroseconds
	TCCR1B |= (1 << CS11);
 376:	e1 e8       	ldi	r30, 0x81	; 129
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	80 83       	st	Z, r24
	// Set start value for timer --> timer interrupt every 100 microseconds
	TCNT1 = TIMER_START_VAL;
 380:	87 e3       	ldi	r24, 0x37	; 55
 382:	9f ef       	ldi	r25, 0xFF	; 255
 384:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 388:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	// Enable Timer Overflow Interrupt
	TIMSK1 |= (1 << TOIE1);
 38c:	ef e6       	ldi	r30, 0x6F	; 111
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	81 60       	ori	r24, 0x01	; 1
 394:	80 83       	st	Z, r24
 396:	08 95       	ret

00000398 <declareTimer>:
}

inline bool isRunning(timerType timer) {
	return timerArray[timer].running;
 398:	eb e0       	ldi	r30, 0x0B	; 11
 39a:	8e 9f       	mul	r24, r30
 39c:	c0 01       	movw	r24, r0
 39e:	11 24       	eor	r1, r1
 3a0:	fc 01       	movw	r30, r24
 3a2:	e0 5a       	subi	r30, 0xA0	; 160
 3a4:	fe 4f       	sbci	r31, 0xFE	; 254
 3a6:	80 81       	ld	r24, Z
		}
	}
}

void declareTimer(timerType timer, uint32_t interval, void (*callback)(void)) {
	if(!isRunning(timer)) {
 3a8:	81 11       	cpse	r24, r1
 3aa:	0a c0       	rjmp	.+20     	; 0x3c0 <declareTimer+0x28>
		timerArray[timer].interval = interval;
 3ac:	43 83       	std	Z+3, r20	; 0x03
 3ae:	54 83       	std	Z+4, r21	; 0x04
 3b0:	65 83       	std	Z+5, r22	; 0x05
 3b2:	76 83       	std	Z+6, r23	; 0x06
		timerArray[timer].timeLeft = interval;
 3b4:	47 83       	std	Z+7, r20	; 0x07
 3b6:	50 87       	std	Z+8, r21	; 0x08
 3b8:	61 87       	std	Z+9, r22	; 0x09
 3ba:	72 87       	std	Z+10, r23	; 0x0a
		timerArray[timer].callback = callback;
 3bc:	32 83       	std	Z+2, r19	; 0x02
 3be:	21 83       	std	Z+1, r18	; 0x01
 3c0:	08 95       	ret

000003c2 <startTimer>:
	// Enable Timer Overflow Interrupt
	TIMSK1 |= (1 << TOIE1);
}

inline bool isRunning(timerType timer) {
	return timerArray[timer].running;
 3c2:	2b e0       	ldi	r18, 0x0B	; 11
 3c4:	82 9f       	mul	r24, r18
 3c6:	c0 01       	movw	r24, r0
 3c8:	11 24       	eor	r1, r1
 3ca:	fc 01       	movw	r30, r24
 3cc:	e0 5a       	subi	r30, 0xA0	; 160
 3ce:	fe 4f       	sbci	r31, 0xFE	; 254
 3d0:	80 81       	ld	r24, Z
		timerArray[timer].callback = callback;
	}
}

void startTimer(timerType timer) {
	if(!isRunning(timer)) {
 3d2:	81 11       	cpse	r24, r1
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <startTimer+0x18>
		timerArray[timer].running = 1;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 83       	st	Z, r24
 3da:	08 95       	ret

000003dc <cancelTimer>:
	}
}

void cancelTimer(timerType timer) {
	timerArray[timer].running = 0;
 3dc:	2b e0       	ldi	r18, 0x0B	; 11
 3de:	82 9f       	mul	r24, r18
 3e0:	c0 01       	movw	r24, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	fc 01       	movw	r30, r24
 3e6:	e0 5a       	subi	r30, 0xA0	; 160
 3e8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ea:	10 82       	st	Z, r1
 3ec:	08 95       	ret

000003ee <bufferEmpty>:
}



bool bufferEmpty() {
	return (!counter);
 3ee:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <counter>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	91 11       	cpse	r25, r1
 3f6:	80 e0       	ldi	r24, 0x00	; 0
}
 3f8:	08 95       	ret

000003fa <uart_send>:

void uart_send(uint8_t data) {
	
	// If send register empty and no XOFF
	while(!(UCSR0A & (1<<UDRE0)) && !sendBlock) {
 3fa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3fe:	95 fd       	sbrc	r25, 5
 400:	04 c0       	rjmp	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 402:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sendBlock>
 406:	99 23       	and	r25, r25
 408:	c1 f3       	breq	.-16     	; 0x3fa <uart_send>
		;
	}
	UDR0 = data;
 40a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 40e:	08 95       	ret

00000410 <clearScreen>:
	
}

void clearScreen(){
	// Clear terminal
	uart_send(27); // ESC
 410:	8b e1       	ldi	r24, 0x1B	; 27
 412:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
	uart_send('[');
 416:	8b e5       	ldi	r24, 0x5B	; 91
 418:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
	uart_send('2');
 41c:	82 e3       	ldi	r24, 0x32	; 50
 41e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
	uart_send('J');
 422:	8a e4       	ldi	r24, 0x4A	; 74
 424:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>

	// Move cursor to start
	uart_send(27);
 428:	8b e1       	ldi	r24, 0x1B	; 27
 42a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
	uart_send('[');
 42e:	8b e5       	ldi	r24, 0x5B	; 91
 430:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
	uart_send('H');
 434:	88 e4       	ldi	r24, 0x48	; 72
 436:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <uart_send>

0000043a <uart_init>:
}

void uart_init() {
	// Configure baud rate
	UBRR0H = (BAUD_CONST >> 8);
 43a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_CONST;
 43e:	87 e6       	ldi	r24, 0x67	; 103
 440:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Enable uart send and receive and uart receive complete interrupt
	UCSR0B |= ((1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0));
 444:	e1 ec       	ldi	r30, 0xC1	; 193
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	88 69       	ori	r24, 0x98	; 152
 44c:	80 83       	st	Z, r24

    clearScreen();
 44e:	0c 94 08 02 	jmp	0x410	; 0x410 <clearScreen>

00000452 <send_xoff>:
	}

	return returnVal;
}

void send_xoff(){
 452:	cf 93       	push	r28
	uint8_t sreg = SREG;
 454:	cf b7       	in	r28, 0x3f	; 63
	cli();
 456:	f8 94       	cli
	x_status = XOFF;
 458:	83 e1       	ldi	r24, 0x13	; 19
 45a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <x_status>
	uart_send(XOFF);
 45e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
	SREG = sreg;
 462:	cf bf       	out	0x3f, r28	; 63
	
}
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <__vector_18>:
volatile uint8_t lastRead = 0;
volatile uint8_t counter = 0;
volatile uint8_t sendBlock = 0;
volatile uint8_t x_status = XON; 

ISR(USART_RX_vect){
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
	uint8_t tmp = UDR0;
 48a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	// If XOFF is received block sending
	if (tmp == XOFF) {
 48e:	83 31       	cpi	r24, 0x13	; 19
 490:	21 f4       	brne	.+8      	; 0x49a <__vector_18+0x32>
		sendBlock = 1;
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <sendBlock>
 498:	22 c0       	rjmp	.+68     	; 0x4de <__vector_18+0x76>
	} 
	// if XON is received allow sending
	else if(tmp == XON) {
 49a:	81 31       	cpi	r24, 0x11	; 17
 49c:	19 f4       	brne	.+6      	; 0x4a4 <__vector_18+0x3c>
		sendBlock = 0;
 49e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <sendBlock>
 4a2:	1d c0       	rjmp	.+58     	; 0x4de <__vector_18+0x76>
	}
	else {
		receiveBuffer[lastReceived] = tmp;
 4a4:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <lastReceived>
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	e0 5c       	subi	r30, 0xC0	; 192
 4ac:	fe 4f       	sbci	r31, 0xFE	; 254
 4ae:	80 83       	st	Z, r24
		lastReceived = ((lastReceived + 1) % 32);
 4b0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <lastReceived>
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	8f 71       	andi	r24, 0x1F	; 31
 4ba:	99 27       	eor	r25, r25
 4bc:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <lastReceived>
		counter++;
 4c0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <counter>
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <counter>
		// If ring buffer has 26 elements stop receiving
		if(counter >= 22 && x_status==XON) {
 4ca:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <counter>
 4ce:	86 31       	cpi	r24, 0x16	; 22
 4d0:	30 f0       	brcs	.+12     	; 0x4de <__vector_18+0x76>
 4d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x_status>
 4d6:	81 31       	cpi	r24, 0x11	; 17
 4d8:	11 f4       	brne	.+4      	; 0x4de <__vector_18+0x76>
			send_xoff();
 4da:	0e 94 29 02 	call	0x452	; 0x452 <send_xoff>
		}
	}
	 
	
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	7f 91       	pop	r23
 4ec:	6f 91       	pop	r22
 4ee:	5f 91       	pop	r21
 4f0:	4f 91       	pop	r20
 4f2:	3f 91       	pop	r19
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <send_xon>:
	x_status = XOFF;
	uart_send(XOFF);
	SREG = sreg;
	
}
void send_xon(){
 500:	cf 93       	push	r28
	uint8_t sreg = SREG;
 502:	cf b7       	in	r28, 0x3f	; 63
	cli();
 504:	f8 94       	cli
	x_status = XON;
 506:	81 e1       	ldi	r24, 0x11	; 17
 508:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <x_status>
	uart_send(XON);
 50c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
	SREG = sreg;
 510:	cf bf       	out	0x3f, r28	; 63
}
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <uart_receive>:
		;
	}
	UDR0 = data;
}

uint8_t uart_receive(){
 516:	cf 93       	push	r28
}



bool bufferEmpty() {
	return (!counter);
 518:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <counter>
	}
	UDR0 = data;
}

uint8_t uart_receive(){
	if(bufferEmpty()) {
 51c:	88 23       	and	r24, r24
 51e:	f1 f0       	breq	.+60     	; 0x55c <uart_receive+0x46>
		return '\0';
	}
	
	uint8_t returnVal = receiveBuffer[lastRead];	
 520:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <lastRead>
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	e0 5c       	subi	r30, 0xC0	; 192
 528:	fe 4f       	sbci	r31, 0xFE	; 254
 52a:	c0 81       	ld	r28, Z
	counter--;
 52c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <counter>
 530:	81 50       	subi	r24, 0x01	; 1
 532:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <counter>
	lastRead = (lastRead + 1) % 32;
 536:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <lastRead>
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	8f 71       	andi	r24, 0x1F	; 31
 540:	99 27       	eor	r25, r25
 542:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <lastRead>
	
	// If ring buffer elements are less than or equal to 10 allow sending
	if (counter <= 10 && x_status == XOFF) {
 546:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <counter>
 54a:	8b 30       	cpi	r24, 0x0B	; 11
 54c:	30 f4       	brcc	.+12     	; 0x55a <uart_receive+0x44>
 54e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x_status>
 552:	83 31       	cpi	r24, 0x13	; 19
 554:	11 f4       	brne	.+4      	; 0x55a <uart_receive+0x44>
		send_xon();
 556:	0e 94 80 02 	call	0x500	; 0x500 <send_xon>
	uint8_t returnVal = receiveBuffer[lastRead];	
	counter--;
	lastRead = (lastRead + 1) % 32;
	
	// If ring buffer elements are less than or equal to 10 allow sending
	if (counter <= 10 && x_status == XOFF) {
 55a:	8c 2f       	mov	r24, r28
		send_xon();
	}

	return returnVal;
}
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <isValidStartValue>:
    sendPGMString(menuTextReturn);
    while((c = uart_receive()) != 13) ;
    clearScreen();
}

bool isValidStartValue(uint8_t c){
 560:	cf 93       	push	r28
    if(c > 7 || c == 0){
 562:	81 50       	subi	r24, 0x01	; 1
 564:	87 30       	cpi	r24, 0x07	; 7
 566:	20 f1       	brcs	.+72     	; 0x5b0 <isValidStartValue+0x50>
        sendCRLF();
    }
}

inline void sendCRLF(){
    uart_send(0x0D);
 568:	8d e0       	ldi	r24, 0x0D	; 13
 56a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
    uart_send(0x0A);
 56e:	8a e0       	ldi	r24, 0x0A	; 10
 570:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 574:	c0 e0       	ldi	r28, 0x00	; 0

    while((c = pgm_read_byte(string + index)) != 0){
 576:	ec 2f       	mov	r30, r28
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	ec 53       	subi	r30, 0x3C	; 60
 57c:	ff 4f       	sbci	r31, 0xFF	; 255
 57e:	84 91       	lpm	r24, Z
 580:	88 23       	and	r24, r24
 582:	21 f0       	breq	.+8      	; 0x58c <isValidStartValue+0x2c>
        uart_send(c);
 584:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        index++;
 588:	cf 5f       	subi	r28, 0xFF	; 255
 58a:	f5 cf       	rjmp	.-22     	; 0x576 <isValidStartValue+0x16>
        sendCRLF();
    }
}

inline void sendCRLF(){
    uart_send(0x0D);
 58c:	8d e0       	ldi	r24, 0x0D	; 13
 58e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
    uart_send(0x0A);
 592:	8a e0       	ldi	r24, 0x0A	; 10
 594:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 598:	c0 e0       	ldi	r28, 0x00	; 0

    while((c = pgm_read_byte(string + index)) != 0){
 59a:	ec 2f       	mov	r30, r28
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	ea 5d       	subi	r30, 0xDA	; 218
 5a0:	fe 4f       	sbci	r31, 0xFE	; 254
 5a2:	84 91       	lpm	r24, Z
 5a4:	88 23       	and	r24, r24
 5a6:	29 f0       	breq	.+10     	; 0x5b2 <isValidStartValue+0x52>
        uart_send(c);
 5a8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        index++;
 5ac:	cf 5f       	subi	r28, 0xFF	; 255
 5ae:	f5 cf       	rjmp	.-22     	; 0x59a <isValidStartValue+0x3a>
        sendPGMString(menuTextWrongInput);
        sendCRLF();
        sendPGMString(menuTextConfigStartVal);
        return false;
    }
    return true;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
}
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <setLEDS>:

void setLEDS() {
	uint8_t tmp = PORTB;
 5b6:	25 b1       	in	r18, 0x05	; 5
	// 11111000 -> Clear last 3 bits
	tmp &= 0xF8;
	// 00000XXX -> Set count on tmp without modifying first 5 bits
	tmp |= (~count & 0x07);
 5b8:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <count>
 5bc:	89 2f       	mov	r24, r25
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	80 95       	com	r24
 5c2:	90 95       	com	r25
 5c4:	87 70       	andi	r24, 0x07	; 7
 5c6:	99 27       	eor	r25, r25
 5c8:	92 2f       	mov	r25, r18
 5ca:	98 7f       	andi	r25, 0xF8	; 248
 5cc:	89 2b       	or	r24, r25
	PORTB = tmp;
 5ce:	85 b9       	out	0x05, r24	; 5
 5d0:	08 95       	ret

000005d2 <countdown>:
 5d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5d6:	88 23       	and	r24, r24
 5d8:	71 f0       	breq	.+28     	; 0x5f6 <countdown+0x24>
 5da:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <count>
 5de:	88 23       	and	r24, r24
 5e0:	21 f0       	breq	.+8      	; 0x5ea <countdown+0x18>
 5e2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <count>
 5e6:	81 50       	subi	r24, 0x01	; 1
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <countdown+0x1c>
 5ea:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
 5ee:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <count>
 5f2:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <setLEDS>
 5f6:	08 95       	ret

000005f8 <main>:
char msg[30] = {0};


int main(void){
	// Activate Output and Input Pullups and init
	DDRB |= ((1 << LED0_MODE) | (1 << LED1_MODE) | (1 << LED2_MODE));
 5f8:	84 b1       	in	r24, 0x04	; 4
 5fa:	87 60       	ori	r24, 0x07	; 7
 5fc:	84 b9       	out	0x04, r24	; 4
	
	timer_init();
 5fe:	0e 94 bb 01 	call	0x376	; 0x376 <timer_init>
    uart_init();
 602:	0e 94 1d 02 	call	0x43a	; 0x43a <uart_init>

	// Declare 1s timer for counting down 
	declareTimer(TIMER1, 1000000, countdown);
 606:	29 ee       	ldi	r18, 0xE9	; 233
 608:	32 e0       	ldi	r19, 0x02	; 2
 60a:	40 e4       	ldi	r20, 0x40	; 64
 60c:	52 e4       	ldi	r21, 0x42	; 66
 60e:	6f e0       	ldi	r22, 0x0F	; 15
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	0e 94 cc 01 	call	0x398	; 0x398 <declareTimer>

	// Enable global interrupt
	sei();
 618:	78 94       	sei

    // Set LED to starting value
    count = eeprom_read_byte(&startingCount);
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 dd 06 	call	0xdba	; 0xdba <eeprom_read_byte>
 622:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <count>
    setLEDS();
 626:	0e 94 db 02 	call	0x5b6	; 0x5b6 <setLEDS>
        setLEDS();
	}
}

inline void printMenu(){
    uint8_t end = pgm_read_byte(&menuSize);
 62a:	98 e6       	ldi	r25, 0x68	; 104
 62c:	c9 2e       	mov	r12, r25
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	d9 2e       	mov	r13, r25
            }
            sendCRLF();
            break;
        case 4:
            // Return starting time
            snprintf(msg, 30, "Starting Value is set to %c", (char) (eeprom_read_byte(&startingCount) + '0'));
 632:	02 e0       	ldi	r16, 0x02	; 2
 634:	11 e0       	ldi	r17, 0x01	; 1
 636:	de e1       	ldi	r29, 0x1E	; 30
 638:	2e e1       	ldi	r18, 0x1E	; 30
 63a:	e2 2e       	mov	r14, r18
 63c:	21 e0       	ldi	r18, 0x01	; 1
 63e:	f2 2e       	mov	r15, r18
        setLEDS();
	}
}

inline void printMenu(){
    uint8_t end = pgm_read_byte(&menuSize);
 640:	f6 01       	movw	r30, r12
 642:	64 90       	lpm	r6, Z
 644:	89 e6       	ldi	r24, 0x69	; 105
 646:	a8 2e       	mov	r10, r24
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	b8 2e       	mov	r11, r24
    uint16_t adr;

    for(uint8_t i = 0; i < end; i++){
 64c:	c0 e0       	ldi	r28, 0x00	; 0
 64e:	6c 16       	cp	r6, r28
 650:	c9 f0       	breq	.+50     	; 0x684 <main+0x8c>
        adr = pgm_read_word(&menu[i]);
 652:	f5 01       	movw	r30, r10
 654:	85 90       	lpm	r8, Z+
 656:	94 90       	lpm	r9, Z
    uart_send(0x0D);
    uart_send(0x0A);
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 658:	71 2c       	mov	r7, r1

    while((c = pgm_read_byte(string + index)) != 0){
 65a:	f4 01       	movw	r30, r8
 65c:	e7 0d       	add	r30, r7
 65e:	f1 1d       	adc	r31, r1
 660:	84 91       	lpm	r24, Z
 662:	88 23       	and	r24, r24
 664:	21 f0       	breq	.+8      	; 0x66e <main+0x76>
        uart_send(c);
 666:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        index++;
 66a:	73 94       	inc	r7
 66c:	f6 cf       	rjmp	.-20     	; 0x65a <main+0x62>
        sendCRLF();
    }
}

inline void sendCRLF(){
    uart_send(0x0D);
 66e:	8d e0       	ldi	r24, 0x0D	; 13
 670:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
    uart_send(0x0A);
 674:	8a e0       	ldi	r24, 0x0A	; 10
 676:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>

inline void printMenu(){
    uint8_t end = pgm_read_byte(&menuSize);
    uint16_t adr;

    for(uint8_t i = 0; i < end; i++){
 67a:	cf 5f       	subi	r28, 0xFF	; 255
 67c:	f2 e0       	ldi	r31, 0x02	; 2
 67e:	af 0e       	add	r10, r31
 680:	b1 1c       	adc	r11, r1
 682:	e5 cf       	rjmp	.-54     	; 0x64e <main+0x56>
 684:	c0 e0       	ldi	r28, 0x00	; 0
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;

    while((c = pgm_read_byte(string + index)) != 0){
 686:	ec 2f       	mov	r30, r28
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	ee 59       	subi	r30, 0x9E	; 158
 68c:	fe 4f       	sbci	r31, 0xFE	; 254
 68e:	84 91       	lpm	r24, Z
 690:	88 23       	and	r24, r24
 692:	21 f0       	breq	.+8      	; 0x69c <main+0xa4>
        uart_send(c);
 694:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        index++;
 698:	cf 5f       	subi	r28, 0xFF	; 255
 69a:	f5 cf       	rjmp	.-22     	; 0x686 <main+0x8e>

inline void getCommand(){
    sendPGMString(menuTextInput);
    uint8_t c;

    while((c = uart_receive()) == '\0') ;
 69c:	0e 94 8b 02 	call	0x516	; 0x516 <uart_receive>
 6a0:	c8 2f       	mov	r28, r24
 6a2:	88 23       	and	r24, r24
 6a4:	d9 f3       	breq	.-10     	; 0x69c <main+0xa4>
    clearScreen();
 6a6:	0e 94 08 02 	call	0x410	; 0x410 <clearScreen>
    uart_send(0x0D);
    uart_send(0x0A);
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 6aa:	b1 2c       	mov	r11, r1

    while((c = pgm_read_byte(string + index)) != 0){
 6ac:	eb 2d       	mov	r30, r11
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	ee 59       	subi	r30, 0x9E	; 158
 6b2:	fe 4f       	sbci	r31, 0xFE	; 254
 6b4:	84 91       	lpm	r24, Z
 6b6:	88 23       	and	r24, r24
 6b8:	21 f0       	breq	.+8      	; 0x6c2 <main+0xca>
        uart_send(c);
 6ba:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        index++;
 6be:	b3 94       	inc	r11
 6c0:	f5 cf       	rjmp	.-22     	; 0x6ac <main+0xb4>
    uint8_t c;

    while((c = uart_receive()) == '\0') ;
    clearScreen();
    sendPGMString(menuTextInput);
    uart_send(c);
 6c2:	8c 2f       	mov	r24, r28
 6c4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        sendCRLF();
    }
}

inline void sendCRLF(){
    uart_send(0x0D);
 6c8:	8d e0       	ldi	r24, 0x0D	; 13
 6ca:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
    uart_send(0x0A);
 6ce:	8a e0       	ldi	r24, 0x0A	; 10
 6d0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
    uart_send(c);
    sendCRLF();

    c -= '0';

    switch(c){
 6d4:	80 ed       	ldi	r24, 0xD0	; 208
 6d6:	8c 0f       	add	r24, r28
 6d8:	82 30       	cpi	r24, 0x02	; 2
 6da:	a1 f1       	breq	.+104    	; 0x744 <main+0x14c>
 6dc:	78 f4       	brcc	.+30     	; 0x6fc <main+0x104>
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	09 f0       	breq	.+2      	; 0x6e4 <main+0xec>
 6e2:	86 c0       	rjmp	.+268    	; 0x7f0 <main+0x1f8>
        case 1:
            // Start Timer
            count = eeprom_read_byte(&startingCount);
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 dd 06 	call	0xdba	; 0xdba <eeprom_read_byte>
 6ec:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <count>
            setLEDS();
 6f0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <setLEDS>
            startTimer(TIMER1);
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <startTimer>
 6fa:	26 c0       	rjmp	.+76     	; 0x748 <main+0x150>
    uart_send(c);
    sendCRLF();

    c -= '0';

    switch(c){
 6fc:	83 30       	cpi	r24, 0x03	; 3
 6fe:	01 f1       	breq	.+64     	; 0x740 <main+0x148>
 700:	84 30       	cpi	r24, 0x04	; 4
 702:	09 f0       	breq	.+2      	; 0x706 <main+0x10e>
 704:	75 c0       	rjmp	.+234    	; 0x7f0 <main+0x1f8>
            }
            sendCRLF();
            break;
        case 4:
            // Return starting time
            snprintf(msg, 30, "Starting Value is set to %c", (char) (eeprom_read_byte(&startingCount) + '0'));
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 dd 06 	call	0xdba	; 0xdba <eeprom_read_byte>
 70e:	80 5d       	subi	r24, 0xD0	; 208
 710:	28 2f       	mov	r18, r24
 712:	08 2e       	mov	r0, r24
 714:	00 0c       	add	r0, r0
 716:	33 0b       	sbc	r19, r19
 718:	3f 93       	push	r19
 71a:	8f 93       	push	r24
 71c:	1f 93       	push	r17
 71e:	0f 93       	push	r16
 720:	1f 92       	push	r1
 722:	df 93       	push	r29
 724:	ff 92       	push	r15
 726:	ef 92       	push	r14
 728:	0e 94 1c 04 	call	0x838	; 0x838 <snprintf>
 72c:	8d b7       	in	r24, 0x3d	; 61
 72e:	9e b7       	in	r25, 0x3e	; 62
 730:	08 96       	adiw	r24, 0x08	; 8
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	9e bf       	out	0x3e, r25	; 62
 738:	0f be       	out	0x3f, r0	; 63
 73a:	8d bf       	out	0x3d, r24	; 61
        index++;
    }   
}

inline void sendString(char * string){
    uint8_t index = 0;
 73c:	c0 e0       	ldi	r28, 0x00	; 0
 73e:	4d c0       	rjmp	.+154    	; 0x7da <main+0x1e2>
    uart_send(c);
    sendCRLF();

    c -= '0';

    switch(c){
 740:	c0 e0       	ldi	r28, 0x00	; 0
 742:	04 c0       	rjmp	.+8      	; 0x74c <main+0x154>
 744:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <timerArray>
    uart_send(0x0D);
    uart_send(0x0A);
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 748:	c0 e0       	ldi	r28, 0x00	; 0
 74a:	64 c0       	rjmp	.+200    	; 0x814 <__DATA_REGION_LENGTH__+0x14>

    while((c = pgm_read_byte(string + index)) != 0){
 74c:	ec 2f       	mov	r30, r28
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	ea 5d       	subi	r30, 0xDA	; 218
 752:	fe 4f       	sbci	r31, 0xFE	; 254
 754:	84 91       	lpm	r24, Z
 756:	88 23       	and	r24, r24
 758:	61 f0       	breq	.+24     	; 0x772 <main+0x17a>
        uart_send(c);
 75a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        index++;
 75e:	cf 5f       	subi	r28, 0xFF	; 255
 760:	f5 cf       	rjmp	.-22     	; 0x74c <main+0x154>
            sendPGMString(menuTextConfigStartVal);
            int8_t c;

            do{
                while((c = uart_receive()) == '\0') ;
                uart_send(c);
 762:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
            } while(!isValidStartValue(c - '0'));
 766:	80 ed       	ldi	r24, 0xD0	; 208
 768:	8c 0f       	add	r24, r28
 76a:	0e 94 b0 02 	call	0x560	; 0x560 <isValidStartValue>
 76e:	81 11       	cpse	r24, r1
 770:	06 c0       	rjmp	.+12     	; 0x77e <main+0x186>
            // Configure starting time
            sendPGMString(menuTextConfigStartVal);
            int8_t c;

            do{
                while((c = uart_receive()) == '\0') ;
 772:	0e 94 8b 02 	call	0x516	; 0x516 <uart_receive>
 776:	c8 2f       	mov	r28, r24
 778:	88 23       	and	r24, r24
 77a:	d9 f3       	breq	.-10     	; 0x772 <main+0x17a>
 77c:	f2 cf       	rjmp	.-28     	; 0x762 <main+0x16a>
	// Enable Timer Overflow Interrupt
	TIMSK1 |= (1 << TOIE1);
}

inline bool isRunning(timerType timer) {
	return timerArray[timer].running;
 77e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <timerArray>
                uart_send(c);
            } while(!isValidStartValue(c - '0'));

            // Set new count value
            if(isRunning(TIMER1)){
 782:	88 23       	and	r24, r24
 784:	91 f0       	breq	.+36     	; 0x7aa <main+0x1b2>
        sendCRLF();
    }
}

inline void sendCRLF(){
    uart_send(0x0D);
 786:	8d e0       	ldi	r24, 0x0D	; 13
 788:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
    uart_send(0x0A);
 78c:	8a e0       	ldi	r24, 0x0A	; 10
 78e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 792:	c0 e0       	ldi	r28, 0x00	; 0

    while((c = pgm_read_byte(string + index)) != 0){
 794:	ec 2f       	mov	r30, r28
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	e9 58       	subi	r30, 0x89	; 137
 79a:	ff 4f       	sbci	r31, 0xFF	; 255
 79c:	84 91       	lpm	r24, Z
 79e:	88 23       	and	r24, r24
 7a0:	a9 f0       	breq	.+42     	; 0x7cc <main+0x1d4>
        uart_send(c);
 7a2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        index++;
 7a6:	cf 5f       	subi	r28, 0xFF	; 255
 7a8:	f5 cf       	rjmp	.-22     	; 0x794 <main+0x19c>
            if(isRunning(TIMER1)){
                sendCRLF();
                sendPGMString(menuTextRunningInfo);
            } else {
                uint16_t newStartingCount = c - '0';
                eeprom_write_byte(&startingCount, newStartingCount);
 7aa:	6c 2f       	mov	r22, r28
 7ac:	cc 0f       	add	r28, r28
 7ae:	77 0b       	sbc	r23, r23
 7b0:	60 53       	subi	r22, 0x30	; 48
 7b2:	71 09       	sbc	r23, r1
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 e5 06 	call	0xdca	; 0xdca <eeprom_write_byte>
                count = eeprom_read_byte(&startingCount);
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 dd 06 	call	0xdba	; 0xdba <eeprom_read_byte>
 7c4:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <count>
                setLEDS();
 7c8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <setLEDS>
        sendCRLF();
    }
}

inline void sendCRLF(){
    uart_send(0x0D);
 7cc:	8d e0       	ldi	r24, 0x0D	; 13
 7ce:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
    uart_send(0x0A);
 7d2:	8a e0       	ldi	r24, 0x0A	; 10
 7d4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
 7d8:	b7 cf       	rjmp	.-146    	; 0x748 <main+0x150>
}

inline void sendString(char * string){
    uint8_t index = 0;

    while(string[index] != 0){
 7da:	ec 2f       	mov	r30, r28
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	e2 5e       	subi	r30, 0xE2	; 226
 7e0:	fe 4f       	sbci	r31, 0xFE	; 254
 7e2:	80 81       	ld	r24, Z
 7e4:	88 23       	and	r24, r24
 7e6:	91 f3       	breq	.-28     	; 0x7cc <main+0x1d4>
        uart_send(string[index]);
 7e8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        index++;
 7ec:	cf 5f       	subi	r28, 0xFF	; 255
 7ee:	f5 cf       	rjmp	.-22     	; 0x7da <main+0x1e2>
        sendCRLF();
    }
}

inline void sendCRLF(){
    uart_send(0x0D);
 7f0:	8d e0       	ldi	r24, 0x0D	; 13
 7f2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
    uart_send(0x0A);
 7f6:	8a e0       	ldi	r24, 0x0A	; 10
 7f8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 7fc:	c0 e0       	ldi	r28, 0x00	; 0

    while((c = pgm_read_byte(string + index)) != 0){
 7fe:	ec 2f       	mov	r30, r28
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	e7 50       	subi	r30, 0x07	; 7
 804:	ff 4f       	sbci	r31, 0xFF	; 255
 806:	84 91       	lpm	r24, Z
 808:	88 23       	and	r24, r24
 80a:	01 f3       	breq	.-64     	; 0x7cc <main+0x1d4>
        uart_send(c);
 80c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        index++;
 810:	cf 5f       	subi	r28, 0xFF	; 255
 812:	f5 cf       	rjmp	.-22     	; 0x7fe <main+0x206>
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;

    while((c = pgm_read_byte(string + index)) != 0){
 814:	ec 2f       	mov	r30, r28
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	e3 5c       	subi	r30, 0xC3	; 195
 81a:	fe 4f       	sbci	r31, 0xFE	; 254
 81c:	84 91       	lpm	r24, Z
 81e:	88 23       	and	r24, r24
 820:	21 f0       	breq	.+8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
        uart_send(c);
 822:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_send>
        index++;
 826:	cf 5f       	subi	r28, 0xFF	; 255
 828:	f5 cf       	rjmp	.-22     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
            sendCRLF();
            break;
    }

    sendPGMString(menuTextReturn);
    while((c = uart_receive()) != 13) ;
 82a:	0e 94 8b 02 	call	0x516	; 0x516 <uart_receive>
 82e:	8d 30       	cpi	r24, 0x0D	; 13
 830:	e1 f7       	brne	.-8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
    clearScreen();
 832:	0e 94 08 02 	call	0x410	; 0x410 <clearScreen>
 836:	04 cf       	rjmp	.-504    	; 0x640 <main+0x48>

00000838 <snprintf>:
 838:	ae e0       	ldi	r26, 0x0E	; 14
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	e2 e2       	ldi	r30, 0x22	; 34
 83e:	f4 e0       	ldi	r31, 0x04	; 4
 840:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__prologue_saves__+0x1c>
 844:	0d 89       	ldd	r16, Y+21	; 0x15
 846:	1e 89       	ldd	r17, Y+22	; 0x16
 848:	8f 89       	ldd	r24, Y+23	; 0x17
 84a:	98 8d       	ldd	r25, Y+24	; 0x18
 84c:	26 e0       	ldi	r18, 0x06	; 6
 84e:	2c 83       	std	Y+4, r18	; 0x04
 850:	1a 83       	std	Y+2, r17	; 0x02
 852:	09 83       	std	Y+1, r16	; 0x01
 854:	97 ff       	sbrs	r25, 7
 856:	02 c0       	rjmp	.+4      	; 0x85c <snprintf+0x24>
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	90 e8       	ldi	r25, 0x80	; 128
 85c:	01 97       	sbiw	r24, 0x01	; 1
 85e:	9e 83       	std	Y+6, r25	; 0x06
 860:	8d 83       	std	Y+5, r24	; 0x05
 862:	ae 01       	movw	r20, r28
 864:	45 5e       	subi	r20, 0xE5	; 229
 866:	5f 4f       	sbci	r21, 0xFF	; 255
 868:	69 8d       	ldd	r22, Y+25	; 0x19
 86a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 86c:	ce 01       	movw	r24, r28
 86e:	01 96       	adiw	r24, 0x01	; 1
 870:	0e 94 4c 04 	call	0x898	; 0x898 <vfprintf>
 874:	4d 81       	ldd	r20, Y+5	; 0x05
 876:	5e 81       	ldd	r21, Y+6	; 0x06
 878:	57 fd       	sbrc	r21, 7
 87a:	0a c0       	rjmp	.+20     	; 0x890 <snprintf+0x58>
 87c:	2f 81       	ldd	r18, Y+7	; 0x07
 87e:	38 85       	ldd	r19, Y+8	; 0x08
 880:	42 17       	cp	r20, r18
 882:	53 07       	cpc	r21, r19
 884:	0c f4       	brge	.+2      	; 0x888 <snprintf+0x50>
 886:	9a 01       	movw	r18, r20
 888:	f8 01       	movw	r30, r16
 88a:	e2 0f       	add	r30, r18
 88c:	f3 1f       	adc	r31, r19
 88e:	10 82       	st	Z, r1
 890:	2e 96       	adiw	r28, 0x0e	; 14
 892:	e4 e0       	ldi	r30, 0x04	; 4
 894:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__epilogue_restores__+0x1c>

00000898 <vfprintf>:
 898:	ab e0       	ldi	r26, 0x0B	; 11
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	e2 e5       	ldi	r30, 0x52	; 82
 89e:	f4 e0       	ldi	r31, 0x04	; 4
 8a0:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__prologue_saves__>
 8a4:	6c 01       	movw	r12, r24
 8a6:	7b 01       	movw	r14, r22
 8a8:	8a 01       	movw	r16, r20
 8aa:	fc 01       	movw	r30, r24
 8ac:	17 82       	std	Z+7, r1	; 0x07
 8ae:	16 82       	std	Z+6, r1	; 0x06
 8b0:	83 81       	ldd	r24, Z+3	; 0x03
 8b2:	81 ff       	sbrs	r24, 1
 8b4:	cc c1       	rjmp	.+920    	; 0xc4e <__stack+0x34f>
 8b6:	ce 01       	movw	r24, r28
 8b8:	01 96       	adiw	r24, 0x01	; 1
 8ba:	3c 01       	movw	r6, r24
 8bc:	f6 01       	movw	r30, r12
 8be:	93 81       	ldd	r25, Z+3	; 0x03
 8c0:	f7 01       	movw	r30, r14
 8c2:	93 fd       	sbrc	r25, 3
 8c4:	85 91       	lpm	r24, Z+
 8c6:	93 ff       	sbrs	r25, 3
 8c8:	81 91       	ld	r24, Z+
 8ca:	7f 01       	movw	r14, r30
 8cc:	88 23       	and	r24, r24
 8ce:	09 f4       	brne	.+2      	; 0x8d2 <vfprintf+0x3a>
 8d0:	ba c1       	rjmp	.+884    	; 0xc46 <__stack+0x347>
 8d2:	85 32       	cpi	r24, 0x25	; 37
 8d4:	39 f4       	brne	.+14     	; 0x8e4 <vfprintf+0x4c>
 8d6:	93 fd       	sbrc	r25, 3
 8d8:	85 91       	lpm	r24, Z+
 8da:	93 ff       	sbrs	r25, 3
 8dc:	81 91       	ld	r24, Z+
 8de:	7f 01       	movw	r14, r30
 8e0:	85 32       	cpi	r24, 0x25	; 37
 8e2:	29 f4       	brne	.+10     	; 0x8ee <vfprintf+0x56>
 8e4:	b6 01       	movw	r22, r12
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 8ec:	e7 cf       	rjmp	.-50     	; 0x8bc <vfprintf+0x24>
 8ee:	91 2c       	mov	r9, r1
 8f0:	21 2c       	mov	r2, r1
 8f2:	31 2c       	mov	r3, r1
 8f4:	ff e1       	ldi	r31, 0x1F	; 31
 8f6:	f3 15       	cp	r31, r3
 8f8:	d8 f0       	brcs	.+54     	; 0x930 <__stack+0x31>
 8fa:	8b 32       	cpi	r24, 0x2B	; 43
 8fc:	79 f0       	breq	.+30     	; 0x91c <__stack+0x1d>
 8fe:	38 f4       	brcc	.+14     	; 0x90e <__stack+0xf>
 900:	80 32       	cpi	r24, 0x20	; 32
 902:	79 f0       	breq	.+30     	; 0x922 <__stack+0x23>
 904:	83 32       	cpi	r24, 0x23	; 35
 906:	a1 f4       	brne	.+40     	; 0x930 <__stack+0x31>
 908:	23 2d       	mov	r18, r3
 90a:	20 61       	ori	r18, 0x10	; 16
 90c:	1d c0       	rjmp	.+58     	; 0x948 <__stack+0x49>
 90e:	8d 32       	cpi	r24, 0x2D	; 45
 910:	61 f0       	breq	.+24     	; 0x92a <__stack+0x2b>
 912:	80 33       	cpi	r24, 0x30	; 48
 914:	69 f4       	brne	.+26     	; 0x930 <__stack+0x31>
 916:	23 2d       	mov	r18, r3
 918:	21 60       	ori	r18, 0x01	; 1
 91a:	16 c0       	rjmp	.+44     	; 0x948 <__stack+0x49>
 91c:	83 2d       	mov	r24, r3
 91e:	82 60       	ori	r24, 0x02	; 2
 920:	38 2e       	mov	r3, r24
 922:	e3 2d       	mov	r30, r3
 924:	e4 60       	ori	r30, 0x04	; 4
 926:	3e 2e       	mov	r3, r30
 928:	2a c0       	rjmp	.+84     	; 0x97e <__stack+0x7f>
 92a:	f3 2d       	mov	r31, r3
 92c:	f8 60       	ori	r31, 0x08	; 8
 92e:	1d c0       	rjmp	.+58     	; 0x96a <__stack+0x6b>
 930:	37 fc       	sbrc	r3, 7
 932:	2d c0       	rjmp	.+90     	; 0x98e <__stack+0x8f>
 934:	20 ed       	ldi	r18, 0xD0	; 208
 936:	28 0f       	add	r18, r24
 938:	2a 30       	cpi	r18, 0x0A	; 10
 93a:	40 f0       	brcs	.+16     	; 0x94c <__stack+0x4d>
 93c:	8e 32       	cpi	r24, 0x2E	; 46
 93e:	b9 f4       	brne	.+46     	; 0x96e <__stack+0x6f>
 940:	36 fc       	sbrc	r3, 6
 942:	81 c1       	rjmp	.+770    	; 0xc46 <__stack+0x347>
 944:	23 2d       	mov	r18, r3
 946:	20 64       	ori	r18, 0x40	; 64
 948:	32 2e       	mov	r3, r18
 94a:	19 c0       	rjmp	.+50     	; 0x97e <__stack+0x7f>
 94c:	36 fe       	sbrs	r3, 6
 94e:	06 c0       	rjmp	.+12     	; 0x95c <__stack+0x5d>
 950:	8a e0       	ldi	r24, 0x0A	; 10
 952:	98 9e       	mul	r9, r24
 954:	20 0d       	add	r18, r0
 956:	11 24       	eor	r1, r1
 958:	92 2e       	mov	r9, r18
 95a:	11 c0       	rjmp	.+34     	; 0x97e <__stack+0x7f>
 95c:	ea e0       	ldi	r30, 0x0A	; 10
 95e:	2e 9e       	mul	r2, r30
 960:	20 0d       	add	r18, r0
 962:	11 24       	eor	r1, r1
 964:	22 2e       	mov	r2, r18
 966:	f3 2d       	mov	r31, r3
 968:	f0 62       	ori	r31, 0x20	; 32
 96a:	3f 2e       	mov	r3, r31
 96c:	08 c0       	rjmp	.+16     	; 0x97e <__stack+0x7f>
 96e:	8c 36       	cpi	r24, 0x6C	; 108
 970:	21 f4       	brne	.+8      	; 0x97a <__stack+0x7b>
 972:	83 2d       	mov	r24, r3
 974:	80 68       	ori	r24, 0x80	; 128
 976:	38 2e       	mov	r3, r24
 978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x7f>
 97a:	88 36       	cpi	r24, 0x68	; 104
 97c:	41 f4       	brne	.+16     	; 0x98e <__stack+0x8f>
 97e:	f7 01       	movw	r30, r14
 980:	93 fd       	sbrc	r25, 3
 982:	85 91       	lpm	r24, Z+
 984:	93 ff       	sbrs	r25, 3
 986:	81 91       	ld	r24, Z+
 988:	7f 01       	movw	r14, r30
 98a:	81 11       	cpse	r24, r1
 98c:	b3 cf       	rjmp	.-154    	; 0x8f4 <vfprintf+0x5c>
 98e:	98 2f       	mov	r25, r24
 990:	9f 7d       	andi	r25, 0xDF	; 223
 992:	95 54       	subi	r25, 0x45	; 69
 994:	93 30       	cpi	r25, 0x03	; 3
 996:	28 f4       	brcc	.+10     	; 0x9a2 <__stack+0xa3>
 998:	0c 5f       	subi	r16, 0xFC	; 252
 99a:	1f 4f       	sbci	r17, 0xFF	; 255
 99c:	9f e3       	ldi	r25, 0x3F	; 63
 99e:	99 83       	std	Y+1, r25	; 0x01
 9a0:	0d c0       	rjmp	.+26     	; 0x9bc <__stack+0xbd>
 9a2:	83 36       	cpi	r24, 0x63	; 99
 9a4:	31 f0       	breq	.+12     	; 0x9b2 <__stack+0xb3>
 9a6:	83 37       	cpi	r24, 0x73	; 115
 9a8:	71 f0       	breq	.+28     	; 0x9c6 <__stack+0xc7>
 9aa:	83 35       	cpi	r24, 0x53	; 83
 9ac:	09 f0       	breq	.+2      	; 0x9b0 <__stack+0xb1>
 9ae:	59 c0       	rjmp	.+178    	; 0xa62 <__stack+0x163>
 9b0:	21 c0       	rjmp	.+66     	; 0x9f4 <__stack+0xf5>
 9b2:	f8 01       	movw	r30, r16
 9b4:	80 81       	ld	r24, Z
 9b6:	89 83       	std	Y+1, r24	; 0x01
 9b8:	0e 5f       	subi	r16, 0xFE	; 254
 9ba:	1f 4f       	sbci	r17, 0xFF	; 255
 9bc:	88 24       	eor	r8, r8
 9be:	83 94       	inc	r8
 9c0:	91 2c       	mov	r9, r1
 9c2:	53 01       	movw	r10, r6
 9c4:	13 c0       	rjmp	.+38     	; 0x9ec <__stack+0xed>
 9c6:	28 01       	movw	r4, r16
 9c8:	f2 e0       	ldi	r31, 0x02	; 2
 9ca:	4f 0e       	add	r4, r31
 9cc:	51 1c       	adc	r5, r1
 9ce:	f8 01       	movw	r30, r16
 9d0:	a0 80       	ld	r10, Z
 9d2:	b1 80       	ldd	r11, Z+1	; 0x01
 9d4:	36 fe       	sbrs	r3, 6
 9d6:	03 c0       	rjmp	.+6      	; 0x9de <__stack+0xdf>
 9d8:	69 2d       	mov	r22, r9
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <__stack+0xe3>
 9de:	6f ef       	ldi	r22, 0xFF	; 255
 9e0:	7f ef       	ldi	r23, 0xFF	; 255
 9e2:	c5 01       	movw	r24, r10
 9e4:	0e 94 38 06 	call	0xc70	; 0xc70 <strnlen>
 9e8:	4c 01       	movw	r8, r24
 9ea:	82 01       	movw	r16, r4
 9ec:	f3 2d       	mov	r31, r3
 9ee:	ff 77       	andi	r31, 0x7F	; 127
 9f0:	3f 2e       	mov	r3, r31
 9f2:	16 c0       	rjmp	.+44     	; 0xa20 <__stack+0x121>
 9f4:	28 01       	movw	r4, r16
 9f6:	22 e0       	ldi	r18, 0x02	; 2
 9f8:	42 0e       	add	r4, r18
 9fa:	51 1c       	adc	r5, r1
 9fc:	f8 01       	movw	r30, r16
 9fe:	a0 80       	ld	r10, Z
 a00:	b1 80       	ldd	r11, Z+1	; 0x01
 a02:	36 fe       	sbrs	r3, 6
 a04:	03 c0       	rjmp	.+6      	; 0xa0c <__stack+0x10d>
 a06:	69 2d       	mov	r22, r9
 a08:	70 e0       	ldi	r23, 0x00	; 0
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__stack+0x111>
 a0c:	6f ef       	ldi	r22, 0xFF	; 255
 a0e:	7f ef       	ldi	r23, 0xFF	; 255
 a10:	c5 01       	movw	r24, r10
 a12:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strnlen_P>
 a16:	4c 01       	movw	r8, r24
 a18:	f3 2d       	mov	r31, r3
 a1a:	f0 68       	ori	r31, 0x80	; 128
 a1c:	3f 2e       	mov	r3, r31
 a1e:	82 01       	movw	r16, r4
 a20:	33 fc       	sbrc	r3, 3
 a22:	1b c0       	rjmp	.+54     	; 0xa5a <__stack+0x15b>
 a24:	82 2d       	mov	r24, r2
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	88 16       	cp	r8, r24
 a2a:	99 06       	cpc	r9, r25
 a2c:	b0 f4       	brcc	.+44     	; 0xa5a <__stack+0x15b>
 a2e:	b6 01       	movw	r22, r12
 a30:	80 e2       	ldi	r24, 0x20	; 32
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 a38:	2a 94       	dec	r2
 a3a:	f4 cf       	rjmp	.-24     	; 0xa24 <__stack+0x125>
 a3c:	f5 01       	movw	r30, r10
 a3e:	37 fc       	sbrc	r3, 7
 a40:	85 91       	lpm	r24, Z+
 a42:	37 fe       	sbrs	r3, 7
 a44:	81 91       	ld	r24, Z+
 a46:	5f 01       	movw	r10, r30
 a48:	b6 01       	movw	r22, r12
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 a50:	21 10       	cpse	r2, r1
 a52:	2a 94       	dec	r2
 a54:	21 e0       	ldi	r18, 0x01	; 1
 a56:	82 1a       	sub	r8, r18
 a58:	91 08       	sbc	r9, r1
 a5a:	81 14       	cp	r8, r1
 a5c:	91 04       	cpc	r9, r1
 a5e:	71 f7       	brne	.-36     	; 0xa3c <__stack+0x13d>
 a60:	e8 c0       	rjmp	.+464    	; 0xc32 <__stack+0x333>
 a62:	84 36       	cpi	r24, 0x64	; 100
 a64:	11 f0       	breq	.+4      	; 0xa6a <__stack+0x16b>
 a66:	89 36       	cpi	r24, 0x69	; 105
 a68:	41 f5       	brne	.+80     	; 0xaba <__stack+0x1bb>
 a6a:	f8 01       	movw	r30, r16
 a6c:	37 fe       	sbrs	r3, 7
 a6e:	07 c0       	rjmp	.+14     	; 0xa7e <__stack+0x17f>
 a70:	60 81       	ld	r22, Z
 a72:	71 81       	ldd	r23, Z+1	; 0x01
 a74:	82 81       	ldd	r24, Z+2	; 0x02
 a76:	93 81       	ldd	r25, Z+3	; 0x03
 a78:	0c 5f       	subi	r16, 0xFC	; 252
 a7a:	1f 4f       	sbci	r17, 0xFF	; 255
 a7c:	08 c0       	rjmp	.+16     	; 0xa8e <__stack+0x18f>
 a7e:	60 81       	ld	r22, Z
 a80:	71 81       	ldd	r23, Z+1	; 0x01
 a82:	07 2e       	mov	r0, r23
 a84:	00 0c       	add	r0, r0
 a86:	88 0b       	sbc	r24, r24
 a88:	99 0b       	sbc	r25, r25
 a8a:	0e 5f       	subi	r16, 0xFE	; 254
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	f3 2d       	mov	r31, r3
 a90:	ff 76       	andi	r31, 0x6F	; 111
 a92:	3f 2e       	mov	r3, r31
 a94:	97 ff       	sbrs	r25, 7
 a96:	09 c0       	rjmp	.+18     	; 0xaaa <__stack+0x1ab>
 a98:	90 95       	com	r25
 a9a:	80 95       	com	r24
 a9c:	70 95       	com	r23
 a9e:	61 95       	neg	r22
 aa0:	7f 4f       	sbci	r23, 0xFF	; 255
 aa2:	8f 4f       	sbci	r24, 0xFF	; 255
 aa4:	9f 4f       	sbci	r25, 0xFF	; 255
 aa6:	f0 68       	ori	r31, 0x80	; 128
 aa8:	3f 2e       	mov	r3, r31
 aaa:	2a e0       	ldi	r18, 0x0A	; 10
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	a3 01       	movw	r20, r6
 ab0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__ultoa_invert>
 ab4:	88 2e       	mov	r8, r24
 ab6:	86 18       	sub	r8, r6
 ab8:	45 c0       	rjmp	.+138    	; 0xb44 <__stack+0x245>
 aba:	85 37       	cpi	r24, 0x75	; 117
 abc:	31 f4       	brne	.+12     	; 0xaca <__stack+0x1cb>
 abe:	23 2d       	mov	r18, r3
 ac0:	2f 7e       	andi	r18, 0xEF	; 239
 ac2:	b2 2e       	mov	r11, r18
 ac4:	2a e0       	ldi	r18, 0x0A	; 10
 ac6:	30 e0       	ldi	r19, 0x00	; 0
 ac8:	25 c0       	rjmp	.+74     	; 0xb14 <__stack+0x215>
 aca:	93 2d       	mov	r25, r3
 acc:	99 7f       	andi	r25, 0xF9	; 249
 ace:	b9 2e       	mov	r11, r25
 ad0:	8f 36       	cpi	r24, 0x6F	; 111
 ad2:	c1 f0       	breq	.+48     	; 0xb04 <__stack+0x205>
 ad4:	18 f4       	brcc	.+6      	; 0xadc <__stack+0x1dd>
 ad6:	88 35       	cpi	r24, 0x58	; 88
 ad8:	79 f0       	breq	.+30     	; 0xaf8 <__stack+0x1f9>
 ada:	b5 c0       	rjmp	.+362    	; 0xc46 <__stack+0x347>
 adc:	80 37       	cpi	r24, 0x70	; 112
 ade:	19 f0       	breq	.+6      	; 0xae6 <__stack+0x1e7>
 ae0:	88 37       	cpi	r24, 0x78	; 120
 ae2:	21 f0       	breq	.+8      	; 0xaec <__stack+0x1ed>
 ae4:	b0 c0       	rjmp	.+352    	; 0xc46 <__stack+0x347>
 ae6:	e9 2f       	mov	r30, r25
 ae8:	e0 61       	ori	r30, 0x10	; 16
 aea:	be 2e       	mov	r11, r30
 aec:	b4 fe       	sbrs	r11, 4
 aee:	0d c0       	rjmp	.+26     	; 0xb0a <__stack+0x20b>
 af0:	fb 2d       	mov	r31, r11
 af2:	f4 60       	ori	r31, 0x04	; 4
 af4:	bf 2e       	mov	r11, r31
 af6:	09 c0       	rjmp	.+18     	; 0xb0a <__stack+0x20b>
 af8:	34 fe       	sbrs	r3, 4
 afa:	0a c0       	rjmp	.+20     	; 0xb10 <__stack+0x211>
 afc:	29 2f       	mov	r18, r25
 afe:	26 60       	ori	r18, 0x06	; 6
 b00:	b2 2e       	mov	r11, r18
 b02:	06 c0       	rjmp	.+12     	; 0xb10 <__stack+0x211>
 b04:	28 e0       	ldi	r18, 0x08	; 8
 b06:	30 e0       	ldi	r19, 0x00	; 0
 b08:	05 c0       	rjmp	.+10     	; 0xb14 <__stack+0x215>
 b0a:	20 e1       	ldi	r18, 0x10	; 16
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <__stack+0x215>
 b10:	20 e1       	ldi	r18, 0x10	; 16
 b12:	32 e0       	ldi	r19, 0x02	; 2
 b14:	f8 01       	movw	r30, r16
 b16:	b7 fe       	sbrs	r11, 7
 b18:	07 c0       	rjmp	.+14     	; 0xb28 <__stack+0x229>
 b1a:	60 81       	ld	r22, Z
 b1c:	71 81       	ldd	r23, Z+1	; 0x01
 b1e:	82 81       	ldd	r24, Z+2	; 0x02
 b20:	93 81       	ldd	r25, Z+3	; 0x03
 b22:	0c 5f       	subi	r16, 0xFC	; 252
 b24:	1f 4f       	sbci	r17, 0xFF	; 255
 b26:	06 c0       	rjmp	.+12     	; 0xb34 <__stack+0x235>
 b28:	60 81       	ld	r22, Z
 b2a:	71 81       	ldd	r23, Z+1	; 0x01
 b2c:	80 e0       	ldi	r24, 0x00	; 0
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0e 5f       	subi	r16, 0xFE	; 254
 b32:	1f 4f       	sbci	r17, 0xFF	; 255
 b34:	a3 01       	movw	r20, r6
 b36:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__ultoa_invert>
 b3a:	88 2e       	mov	r8, r24
 b3c:	86 18       	sub	r8, r6
 b3e:	fb 2d       	mov	r31, r11
 b40:	ff 77       	andi	r31, 0x7F	; 127
 b42:	3f 2e       	mov	r3, r31
 b44:	36 fe       	sbrs	r3, 6
 b46:	0d c0       	rjmp	.+26     	; 0xb62 <__stack+0x263>
 b48:	23 2d       	mov	r18, r3
 b4a:	2e 7f       	andi	r18, 0xFE	; 254
 b4c:	a2 2e       	mov	r10, r18
 b4e:	89 14       	cp	r8, r9
 b50:	58 f4       	brcc	.+22     	; 0xb68 <__stack+0x269>
 b52:	34 fe       	sbrs	r3, 4
 b54:	0b c0       	rjmp	.+22     	; 0xb6c <__stack+0x26d>
 b56:	32 fc       	sbrc	r3, 2
 b58:	09 c0       	rjmp	.+18     	; 0xb6c <__stack+0x26d>
 b5a:	83 2d       	mov	r24, r3
 b5c:	8e 7e       	andi	r24, 0xEE	; 238
 b5e:	a8 2e       	mov	r10, r24
 b60:	05 c0       	rjmp	.+10     	; 0xb6c <__stack+0x26d>
 b62:	b8 2c       	mov	r11, r8
 b64:	a3 2c       	mov	r10, r3
 b66:	03 c0       	rjmp	.+6      	; 0xb6e <__stack+0x26f>
 b68:	b8 2c       	mov	r11, r8
 b6a:	01 c0       	rjmp	.+2      	; 0xb6e <__stack+0x26f>
 b6c:	b9 2c       	mov	r11, r9
 b6e:	a4 fe       	sbrs	r10, 4
 b70:	0f c0       	rjmp	.+30     	; 0xb90 <__stack+0x291>
 b72:	fe 01       	movw	r30, r28
 b74:	e8 0d       	add	r30, r8
 b76:	f1 1d       	adc	r31, r1
 b78:	80 81       	ld	r24, Z
 b7a:	80 33       	cpi	r24, 0x30	; 48
 b7c:	21 f4       	brne	.+8      	; 0xb86 <__stack+0x287>
 b7e:	9a 2d       	mov	r25, r10
 b80:	99 7e       	andi	r25, 0xE9	; 233
 b82:	a9 2e       	mov	r10, r25
 b84:	09 c0       	rjmp	.+18     	; 0xb98 <__stack+0x299>
 b86:	a2 fe       	sbrs	r10, 2
 b88:	06 c0       	rjmp	.+12     	; 0xb96 <__stack+0x297>
 b8a:	b3 94       	inc	r11
 b8c:	b3 94       	inc	r11
 b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__stack+0x299>
 b90:	8a 2d       	mov	r24, r10
 b92:	86 78       	andi	r24, 0x86	; 134
 b94:	09 f0       	breq	.+2      	; 0xb98 <__stack+0x299>
 b96:	b3 94       	inc	r11
 b98:	a3 fc       	sbrc	r10, 3
 b9a:	11 c0       	rjmp	.+34     	; 0xbbe <__stack+0x2bf>
 b9c:	a0 fe       	sbrs	r10, 0
 b9e:	06 c0       	rjmp	.+12     	; 0xbac <__stack+0x2ad>
 ba0:	b2 14       	cp	r11, r2
 ba2:	88 f4       	brcc	.+34     	; 0xbc6 <__stack+0x2c7>
 ba4:	28 0c       	add	r2, r8
 ba6:	92 2c       	mov	r9, r2
 ba8:	9b 18       	sub	r9, r11
 baa:	0e c0       	rjmp	.+28     	; 0xbc8 <__stack+0x2c9>
 bac:	b2 14       	cp	r11, r2
 bae:	60 f4       	brcc	.+24     	; 0xbc8 <__stack+0x2c9>
 bb0:	b6 01       	movw	r22, r12
 bb2:	80 e2       	ldi	r24, 0x20	; 32
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 bba:	b3 94       	inc	r11
 bbc:	f7 cf       	rjmp	.-18     	; 0xbac <__stack+0x2ad>
 bbe:	b2 14       	cp	r11, r2
 bc0:	18 f4       	brcc	.+6      	; 0xbc8 <__stack+0x2c9>
 bc2:	2b 18       	sub	r2, r11
 bc4:	02 c0       	rjmp	.+4      	; 0xbca <__stack+0x2cb>
 bc6:	98 2c       	mov	r9, r8
 bc8:	21 2c       	mov	r2, r1
 bca:	a4 fe       	sbrs	r10, 4
 bcc:	10 c0       	rjmp	.+32     	; 0xbee <__stack+0x2ef>
 bce:	b6 01       	movw	r22, r12
 bd0:	80 e3       	ldi	r24, 0x30	; 48
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 bd8:	a2 fe       	sbrs	r10, 2
 bda:	17 c0       	rjmp	.+46     	; 0xc0a <__stack+0x30b>
 bdc:	a1 fc       	sbrc	r10, 1
 bde:	03 c0       	rjmp	.+6      	; 0xbe6 <__stack+0x2e7>
 be0:	88 e7       	ldi	r24, 0x78	; 120
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	02 c0       	rjmp	.+4      	; 0xbea <__stack+0x2eb>
 be6:	88 e5       	ldi	r24, 0x58	; 88
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	b6 01       	movw	r22, r12
 bec:	0c c0       	rjmp	.+24     	; 0xc06 <__stack+0x307>
 bee:	8a 2d       	mov	r24, r10
 bf0:	86 78       	andi	r24, 0x86	; 134
 bf2:	59 f0       	breq	.+22     	; 0xc0a <__stack+0x30b>
 bf4:	a1 fe       	sbrs	r10, 1
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <__stack+0x2fd>
 bf8:	8b e2       	ldi	r24, 0x2B	; 43
 bfa:	01 c0       	rjmp	.+2      	; 0xbfe <__stack+0x2ff>
 bfc:	80 e2       	ldi	r24, 0x20	; 32
 bfe:	a7 fc       	sbrc	r10, 7
 c00:	8d e2       	ldi	r24, 0x2D	; 45
 c02:	b6 01       	movw	r22, r12
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 c0a:	89 14       	cp	r8, r9
 c0c:	38 f4       	brcc	.+14     	; 0xc1c <__stack+0x31d>
 c0e:	b6 01       	movw	r22, r12
 c10:	80 e3       	ldi	r24, 0x30	; 48
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 c18:	9a 94       	dec	r9
 c1a:	f7 cf       	rjmp	.-18     	; 0xc0a <__stack+0x30b>
 c1c:	8a 94       	dec	r8
 c1e:	f3 01       	movw	r30, r6
 c20:	e8 0d       	add	r30, r8
 c22:	f1 1d       	adc	r31, r1
 c24:	80 81       	ld	r24, Z
 c26:	b6 01       	movw	r22, r12
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 c2e:	81 10       	cpse	r8, r1
 c30:	f5 cf       	rjmp	.-22     	; 0xc1c <__stack+0x31d>
 c32:	22 20       	and	r2, r2
 c34:	09 f4       	brne	.+2      	; 0xc38 <__stack+0x339>
 c36:	42 ce       	rjmp	.-892    	; 0x8bc <vfprintf+0x24>
 c38:	b6 01       	movw	r22, r12
 c3a:	80 e2       	ldi	r24, 0x20	; 32
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 c42:	2a 94       	dec	r2
 c44:	f6 cf       	rjmp	.-20     	; 0xc32 <__stack+0x333>
 c46:	f6 01       	movw	r30, r12
 c48:	86 81       	ldd	r24, Z+6	; 0x06
 c4a:	97 81       	ldd	r25, Z+7	; 0x07
 c4c:	02 c0       	rjmp	.+4      	; 0xc52 <__stack+0x353>
 c4e:	8f ef       	ldi	r24, 0xFF	; 255
 c50:	9f ef       	ldi	r25, 0xFF	; 255
 c52:	2b 96       	adiw	r28, 0x0b	; 11
 c54:	e2 e1       	ldi	r30, 0x12	; 18
 c56:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__epilogue_restores__>

00000c5a <strnlen_P>:
 c5a:	fc 01       	movw	r30, r24
 c5c:	05 90       	lpm	r0, Z+
 c5e:	61 50       	subi	r22, 0x01	; 1
 c60:	70 40       	sbci	r23, 0x00	; 0
 c62:	01 10       	cpse	r0, r1
 c64:	d8 f7       	brcc	.-10     	; 0xc5c <strnlen_P+0x2>
 c66:	80 95       	com	r24
 c68:	90 95       	com	r25
 c6a:	8e 0f       	add	r24, r30
 c6c:	9f 1f       	adc	r25, r31
 c6e:	08 95       	ret

00000c70 <strnlen>:
 c70:	fc 01       	movw	r30, r24
 c72:	61 50       	subi	r22, 0x01	; 1
 c74:	70 40       	sbci	r23, 0x00	; 0
 c76:	01 90       	ld	r0, Z+
 c78:	01 10       	cpse	r0, r1
 c7a:	d8 f7       	brcc	.-10     	; 0xc72 <strnlen+0x2>
 c7c:	80 95       	com	r24
 c7e:	90 95       	com	r25
 c80:	8e 0f       	add	r24, r30
 c82:	9f 1f       	adc	r25, r31
 c84:	08 95       	ret

00000c86 <fputc>:
 c86:	0f 93       	push	r16
 c88:	1f 93       	push	r17
 c8a:	cf 93       	push	r28
 c8c:	df 93       	push	r29
 c8e:	fb 01       	movw	r30, r22
 c90:	23 81       	ldd	r18, Z+3	; 0x03
 c92:	21 fd       	sbrc	r18, 1
 c94:	03 c0       	rjmp	.+6      	; 0xc9c <fputc+0x16>
 c96:	8f ef       	ldi	r24, 0xFF	; 255
 c98:	9f ef       	ldi	r25, 0xFF	; 255
 c9a:	2c c0       	rjmp	.+88     	; 0xcf4 <fputc+0x6e>
 c9c:	22 ff       	sbrs	r18, 2
 c9e:	16 c0       	rjmp	.+44     	; 0xccc <fputc+0x46>
 ca0:	46 81       	ldd	r20, Z+6	; 0x06
 ca2:	57 81       	ldd	r21, Z+7	; 0x07
 ca4:	24 81       	ldd	r18, Z+4	; 0x04
 ca6:	35 81       	ldd	r19, Z+5	; 0x05
 ca8:	42 17       	cp	r20, r18
 caa:	53 07       	cpc	r21, r19
 cac:	44 f4       	brge	.+16     	; 0xcbe <fputc+0x38>
 cae:	a0 81       	ld	r26, Z
 cb0:	b1 81       	ldd	r27, Z+1	; 0x01
 cb2:	9d 01       	movw	r18, r26
 cb4:	2f 5f       	subi	r18, 0xFF	; 255
 cb6:	3f 4f       	sbci	r19, 0xFF	; 255
 cb8:	31 83       	std	Z+1, r19	; 0x01
 cba:	20 83       	st	Z, r18
 cbc:	8c 93       	st	X, r24
 cbe:	26 81       	ldd	r18, Z+6	; 0x06
 cc0:	37 81       	ldd	r19, Z+7	; 0x07
 cc2:	2f 5f       	subi	r18, 0xFF	; 255
 cc4:	3f 4f       	sbci	r19, 0xFF	; 255
 cc6:	37 83       	std	Z+7, r19	; 0x07
 cc8:	26 83       	std	Z+6, r18	; 0x06
 cca:	14 c0       	rjmp	.+40     	; 0xcf4 <fputc+0x6e>
 ccc:	8b 01       	movw	r16, r22
 cce:	ec 01       	movw	r28, r24
 cd0:	fb 01       	movw	r30, r22
 cd2:	00 84       	ldd	r0, Z+8	; 0x08
 cd4:	f1 85       	ldd	r31, Z+9	; 0x09
 cd6:	e0 2d       	mov	r30, r0
 cd8:	09 95       	icall
 cda:	89 2b       	or	r24, r25
 cdc:	e1 f6       	brne	.-72     	; 0xc96 <fputc+0x10>
 cde:	d8 01       	movw	r26, r16
 ce0:	16 96       	adiw	r26, 0x06	; 6
 ce2:	8d 91       	ld	r24, X+
 ce4:	9c 91       	ld	r25, X
 ce6:	17 97       	sbiw	r26, 0x07	; 7
 ce8:	01 96       	adiw	r24, 0x01	; 1
 cea:	17 96       	adiw	r26, 0x07	; 7
 cec:	9c 93       	st	X, r25
 cee:	8e 93       	st	-X, r24
 cf0:	16 97       	sbiw	r26, 0x06	; 6
 cf2:	ce 01       	movw	r24, r28
 cf4:	df 91       	pop	r29
 cf6:	cf 91       	pop	r28
 cf8:	1f 91       	pop	r17
 cfa:	0f 91       	pop	r16
 cfc:	08 95       	ret

00000cfe <__ultoa_invert>:
 cfe:	fa 01       	movw	r30, r20
 d00:	aa 27       	eor	r26, r26
 d02:	28 30       	cpi	r18, 0x08	; 8
 d04:	51 f1       	breq	.+84     	; 0xd5a <__ultoa_invert+0x5c>
 d06:	20 31       	cpi	r18, 0x10	; 16
 d08:	81 f1       	breq	.+96     	; 0xd6a <__ultoa_invert+0x6c>
 d0a:	e8 94       	clt
 d0c:	6f 93       	push	r22
 d0e:	6e 7f       	andi	r22, 0xFE	; 254
 d10:	6e 5f       	subi	r22, 0xFE	; 254
 d12:	7f 4f       	sbci	r23, 0xFF	; 255
 d14:	8f 4f       	sbci	r24, 0xFF	; 255
 d16:	9f 4f       	sbci	r25, 0xFF	; 255
 d18:	af 4f       	sbci	r26, 0xFF	; 255
 d1a:	b1 e0       	ldi	r27, 0x01	; 1
 d1c:	3e d0       	rcall	.+124    	; 0xd9a <__ultoa_invert+0x9c>
 d1e:	b4 e0       	ldi	r27, 0x04	; 4
 d20:	3c d0       	rcall	.+120    	; 0xd9a <__ultoa_invert+0x9c>
 d22:	67 0f       	add	r22, r23
 d24:	78 1f       	adc	r23, r24
 d26:	89 1f       	adc	r24, r25
 d28:	9a 1f       	adc	r25, r26
 d2a:	a1 1d       	adc	r26, r1
 d2c:	68 0f       	add	r22, r24
 d2e:	79 1f       	adc	r23, r25
 d30:	8a 1f       	adc	r24, r26
 d32:	91 1d       	adc	r25, r1
 d34:	a1 1d       	adc	r26, r1
 d36:	6a 0f       	add	r22, r26
 d38:	71 1d       	adc	r23, r1
 d3a:	81 1d       	adc	r24, r1
 d3c:	91 1d       	adc	r25, r1
 d3e:	a1 1d       	adc	r26, r1
 d40:	20 d0       	rcall	.+64     	; 0xd82 <__ultoa_invert+0x84>
 d42:	09 f4       	brne	.+2      	; 0xd46 <__ultoa_invert+0x48>
 d44:	68 94       	set
 d46:	3f 91       	pop	r19
 d48:	2a e0       	ldi	r18, 0x0A	; 10
 d4a:	26 9f       	mul	r18, r22
 d4c:	11 24       	eor	r1, r1
 d4e:	30 19       	sub	r19, r0
 d50:	30 5d       	subi	r19, 0xD0	; 208
 d52:	31 93       	st	Z+, r19
 d54:	de f6       	brtc	.-74     	; 0xd0c <__ultoa_invert+0xe>
 d56:	cf 01       	movw	r24, r30
 d58:	08 95       	ret
 d5a:	46 2f       	mov	r20, r22
 d5c:	47 70       	andi	r20, 0x07	; 7
 d5e:	40 5d       	subi	r20, 0xD0	; 208
 d60:	41 93       	st	Z+, r20
 d62:	b3 e0       	ldi	r27, 0x03	; 3
 d64:	0f d0       	rcall	.+30     	; 0xd84 <__ultoa_invert+0x86>
 d66:	c9 f7       	brne	.-14     	; 0xd5a <__ultoa_invert+0x5c>
 d68:	f6 cf       	rjmp	.-20     	; 0xd56 <__ultoa_invert+0x58>
 d6a:	46 2f       	mov	r20, r22
 d6c:	4f 70       	andi	r20, 0x0F	; 15
 d6e:	40 5d       	subi	r20, 0xD0	; 208
 d70:	4a 33       	cpi	r20, 0x3A	; 58
 d72:	18 f0       	brcs	.+6      	; 0xd7a <__ultoa_invert+0x7c>
 d74:	49 5d       	subi	r20, 0xD9	; 217
 d76:	31 fd       	sbrc	r19, 1
 d78:	40 52       	subi	r20, 0x20	; 32
 d7a:	41 93       	st	Z+, r20
 d7c:	02 d0       	rcall	.+4      	; 0xd82 <__ultoa_invert+0x84>
 d7e:	a9 f7       	brne	.-22     	; 0xd6a <__ultoa_invert+0x6c>
 d80:	ea cf       	rjmp	.-44     	; 0xd56 <__ultoa_invert+0x58>
 d82:	b4 e0       	ldi	r27, 0x04	; 4
 d84:	a6 95       	lsr	r26
 d86:	97 95       	ror	r25
 d88:	87 95       	ror	r24
 d8a:	77 95       	ror	r23
 d8c:	67 95       	ror	r22
 d8e:	ba 95       	dec	r27
 d90:	c9 f7       	brne	.-14     	; 0xd84 <__ultoa_invert+0x86>
 d92:	00 97       	sbiw	r24, 0x00	; 0
 d94:	61 05       	cpc	r22, r1
 d96:	71 05       	cpc	r23, r1
 d98:	08 95       	ret
 d9a:	9b 01       	movw	r18, r22
 d9c:	ac 01       	movw	r20, r24
 d9e:	0a 2e       	mov	r0, r26
 da0:	06 94       	lsr	r0
 da2:	57 95       	ror	r21
 da4:	47 95       	ror	r20
 da6:	37 95       	ror	r19
 da8:	27 95       	ror	r18
 daa:	ba 95       	dec	r27
 dac:	c9 f7       	brne	.-14     	; 0xda0 <__ultoa_invert+0xa2>
 dae:	62 0f       	add	r22, r18
 db0:	73 1f       	adc	r23, r19
 db2:	84 1f       	adc	r24, r20
 db4:	95 1f       	adc	r25, r21
 db6:	a0 1d       	adc	r26, r0
 db8:	08 95       	ret

00000dba <eeprom_read_byte>:
 dba:	f9 99       	sbic	0x1f, 1	; 31
 dbc:	fe cf       	rjmp	.-4      	; 0xdba <eeprom_read_byte>
 dbe:	92 bd       	out	0x22, r25	; 34
 dc0:	81 bd       	out	0x21, r24	; 33
 dc2:	f8 9a       	sbi	0x1f, 0	; 31
 dc4:	99 27       	eor	r25, r25
 dc6:	80 b5       	in	r24, 0x20	; 32
 dc8:	08 95       	ret

00000dca <eeprom_write_byte>:
 dca:	26 2f       	mov	r18, r22

00000dcc <eeprom_write_r18>:
 dcc:	f9 99       	sbic	0x1f, 1	; 31
 dce:	fe cf       	rjmp	.-4      	; 0xdcc <eeprom_write_r18>
 dd0:	1f ba       	out	0x1f, r1	; 31
 dd2:	92 bd       	out	0x22, r25	; 34
 dd4:	81 bd       	out	0x21, r24	; 33
 dd6:	20 bd       	out	0x20, r18	; 32
 dd8:	0f b6       	in	r0, 0x3f	; 63
 dda:	f8 94       	cli
 ddc:	fa 9a       	sbi	0x1f, 2	; 31
 dde:	f9 9a       	sbi	0x1f, 1	; 31
 de0:	0f be       	out	0x3f, r0	; 63
 de2:	01 96       	adiw	r24, 0x01	; 1
 de4:	08 95       	ret

00000de6 <__prologue_saves__>:
 de6:	2f 92       	push	r2
 de8:	3f 92       	push	r3
 dea:	4f 92       	push	r4
 dec:	5f 92       	push	r5
 dee:	6f 92       	push	r6
 df0:	7f 92       	push	r7
 df2:	8f 92       	push	r8
 df4:	9f 92       	push	r9
 df6:	af 92       	push	r10
 df8:	bf 92       	push	r11
 dfa:	cf 92       	push	r12
 dfc:	df 92       	push	r13
 dfe:	ef 92       	push	r14
 e00:	ff 92       	push	r15
 e02:	0f 93       	push	r16
 e04:	1f 93       	push	r17
 e06:	cf 93       	push	r28
 e08:	df 93       	push	r29
 e0a:	cd b7       	in	r28, 0x3d	; 61
 e0c:	de b7       	in	r29, 0x3e	; 62
 e0e:	ca 1b       	sub	r28, r26
 e10:	db 0b       	sbc	r29, r27
 e12:	0f b6       	in	r0, 0x3f	; 63
 e14:	f8 94       	cli
 e16:	de bf       	out	0x3e, r29	; 62
 e18:	0f be       	out	0x3f, r0	; 63
 e1a:	cd bf       	out	0x3d, r28	; 61
 e1c:	09 94       	ijmp

00000e1e <__epilogue_restores__>:
 e1e:	2a 88       	ldd	r2, Y+18	; 0x12
 e20:	39 88       	ldd	r3, Y+17	; 0x11
 e22:	48 88       	ldd	r4, Y+16	; 0x10
 e24:	5f 84       	ldd	r5, Y+15	; 0x0f
 e26:	6e 84       	ldd	r6, Y+14	; 0x0e
 e28:	7d 84       	ldd	r7, Y+13	; 0x0d
 e2a:	8c 84       	ldd	r8, Y+12	; 0x0c
 e2c:	9b 84       	ldd	r9, Y+11	; 0x0b
 e2e:	aa 84       	ldd	r10, Y+10	; 0x0a
 e30:	b9 84       	ldd	r11, Y+9	; 0x09
 e32:	c8 84       	ldd	r12, Y+8	; 0x08
 e34:	df 80       	ldd	r13, Y+7	; 0x07
 e36:	ee 80       	ldd	r14, Y+6	; 0x06
 e38:	fd 80       	ldd	r15, Y+5	; 0x05
 e3a:	0c 81       	ldd	r16, Y+4	; 0x04
 e3c:	1b 81       	ldd	r17, Y+3	; 0x03
 e3e:	aa 81       	ldd	r26, Y+2	; 0x02
 e40:	b9 81       	ldd	r27, Y+1	; 0x01
 e42:	ce 0f       	add	r28, r30
 e44:	d1 1d       	adc	r29, r1
 e46:	0f b6       	in	r0, 0x3f	; 63
 e48:	f8 94       	cli
 e4a:	de bf       	out	0x3e, r29	; 62
 e4c:	0f be       	out	0x3f, r0	; 63
 e4e:	cd bf       	out	0x3d, r28	; 61
 e50:	ed 01       	movw	r28, r26
 e52:	08 95       	ret

00000e54 <_exit>:
 e54:	f8 94       	cli

00000e56 <__stop_program>:
 e56:	ff cf       	rjmp	.-2      	; 0xe56 <__stop_program>
